// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.4.0.7
//    <NameSpace>Dangl.BCF.BCFv3.Schemas</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><DataMemberNameArg>OnlyIfDifferent</DataMemberNameArg><DataMemberOnXmlIgnore>False</DataMemberOnXmlIgnore><CodeBaseTag>Net45</CodeBaseTag><InitializeFields>All</InitializeFields><GenerateUnusedComplexTypes>False</GenerateUnusedComplexTypes><GenerateUnusedSimpleTypes>False</GenerateUnusedSimpleTypes><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableLazyLoading>True</EnableLazyLoading><VirtualProp>False</VirtualProp><PascalCase>False</PascalCase><AutomaticProperties>False</AutomaticProperties><PropNameSpecified>Default</PropNameSpecified><PrivateFieldName>StartWithUnderscore</PrivateFieldName><PrivateFieldNamePrefix></PrivateFieldNamePrefix><EnableRestriction>True</EnableRestriction><RestrictionMaxLenght>True</RestrictionMaxLenght><RestrictionRegEx>True</RestrictionRegEx><RestrictionRange>True</RestrictionRange><ValidateProperty>False</ValidateProperty><ClassNamePrefix></ClassNamePrefix><ClassLevel>Public</ClassLevel><PartialClass>True</PartialClass><ClassesInSeparateFiles>False</ClassesInSeparateFiles><ClassesInSeparateFilesDir></ClassesInSeparateFilesDir><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><EnableAppInfoSettings>False</EnableAppInfoSettings><EnableExternalSchemasCache>False</EnableExternalSchemasCache><EnableDebug>True</EnableDebug><EnableWarn>False</EnableWarn><ExcludeImportedTypes>False</ExcludeImportedTypes><ExpandNesteadAttributeGroup>False</ExpandNesteadAttributeGroup><CleanupCode>True</CleanupCode><EnableXmlSerialization>True</EnableXmlSerialization><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><EnableEncoding>False</EnableEncoding><EnableXMLIndent>True</EnableXMLIndent><IndentChar>Indent2Space</IndentChar><NewLineAttr>False</NewLineAttr><OmitXML>False</OmitXML><Encoder>UTF8</Encoder><Serializer>XmlSerializer</Serializer><sspNullable>True</sspNullable><sspString>True</sspString><sspCollection>True</sspCollection><sspComplexType>True</sspComplexType><sspSimpleType>True</sspSimpleType><sspEnumType>True</sspEnumType><XmlSerializerEvent>False</XmlSerializerEvent><BaseClassName>EntityBase</BaseClassName><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><CustomUsings></CustomUsings><AttributesToExlude></AttributesToExlude>
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace Dangl.BCF.BCFv3.Schemas
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.ComponentModel.DataAnnotations;
    using System.Xml;
    using System.Collections.Generic;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [XmlTypeAttribute(AnonymousType=true)]
    [XmlRootAttribute(Namespace="", IsNullable=false)]
    public partial class Markup
    {
        #region Private fields
        private Header _header;
        private Topic _topic;
        private static XmlSerializer serializer;
        #endregion
        
        [XmlElement(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Header Header
        {
            get
            {
                if ((_header == null))
                {
                    _header = new Header();
                }
                return _header;
            }
            set
            {
                _header = value;
            }
        }
        
        [XmlElement(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Topic Topic
        {
            get
            {
                if ((_topic == null))
                {
                    _topic = new Topic();
                }
                return _topic;
            }
            set
            {
                _topic = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(Markup));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether Header should be serialized
        /// </summary>
        public virtual bool ShouldSerializeHeader()
        {
            return (_header != null);
        }
        
        /// <summary>
        /// Test whether Topic should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTopic()
        {
            return (_topic != null);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Markup object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Markup object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Markup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Markup obj, out Exception exception)
        {
            exception = null;
            obj = default(Markup);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Markup obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Markup Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Markup)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Markup Deserialize(Stream s)
        {
            return ((Markup)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Markup object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Markup object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Markup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Markup obj, out Exception exception)
        {
            exception = null;
            obj = default(Markup);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Markup obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Markup LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    public partial class Header
    {
        #region Private fields
        private List<File> _files;
        private static XmlSerializer serializer;
        #endregion
        
        [XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [XmlArrayItemAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public List<File> Files
        {
            get
            {
                if ((_files == null))
                {
                    _files = new List<File>();
                }
                return _files;
            }
            set
            {
                _files = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(Header));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether Files should be serialized
        /// </summary>
        public virtual bool ShouldSerializeFiles()
        {
            return Files != null && Files.Count > 0;
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Header object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Header object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Header object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Header obj, out Exception exception)
        {
            exception = null;
            obj = default(Header);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Header obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Header Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Header)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Header Deserialize(Stream s)
        {
            return ((Header)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Header object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Header object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Header object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Header obj, out Exception exception)
        {
            exception = null;
            obj = default(Header);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Header obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Header LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    public partial class File
    {
        #region Private fields
        private bool _shouldSerializeIsExternal;
        private bool _shouldSerializeDate;
        private string _filename;
        private DateTime? _date;
        private string _reference;
        private string _ifcProject;
        private string _ifcSpatialStructureElement;
        private bool _isExternal;
        private static XmlSerializer serializer;
        #endregion
        
        /// <summary>
        /// File class constructor
        /// </summary>
        public File()
        {
            _isExternal = true;
        }
        
        [XmlElement(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Filename
        {
            get
            {
                return _filename;
            }
            set
            {
                _filename = value;
            }
        }
        
        [XmlElement(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime Date
        {
            get
            {
                if (_date.HasValue)
                {
                    return _date.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                _date = value;
                _shouldSerializeDate = true;
            }
        }
        
        [XmlIgnore]
        public bool DateSpecified
        {
            get
            {
                return _date.HasValue;
            }
            set
            {
                if (value==false)
                {
                    _date = null;
                }
            }
        }
        
        [XmlElement(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Reference
        {
            get
            {
                return _reference;
            }
            set
            {
                _reference = value;
            }
        }
        
        [XmlAttribute]
        [RegularExpressionAttribute("[0-9A-Za-z_$]*")]
        public string IfcProject
        {
            get
            {
                return _ifcProject;
            }
            set
            {
                _ifcProject = value;
            }
        }
        
        [XmlAttribute]
        [RegularExpressionAttribute("[0-9A-Za-z_$]*")]
        public string IfcSpatialStructureElement
        {
            get
            {
                return _ifcSpatialStructureElement;
            }
            set
            {
                _ifcSpatialStructureElement = value;
            }
        }
        
        [XmlAttribute]
        [DefaultValue(true)]
        public bool IsExternal
        {
            get
            {
                return _isExternal;
            }
            set
            {
                _isExternal = value;
                _shouldSerializeIsExternal = true;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(File));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether Date should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDate()
        {
            if (_shouldSerializeDate)
            {
                return true;
            }
            return (_date != default(System.DateTime));
        }
        
        /// <summary>
        /// Test whether IsExternal should be serialized
        /// </summary>
        public virtual bool ShouldSerializeIsExternal()
        {
            if (_shouldSerializeIsExternal)
            {
                return true;
            }
            return (_isExternal != default(bool));
        }
        
        /// <summary>
        /// Test whether Filename should be serialized
        /// </summary>
        public virtual bool ShouldSerializeFilename()
        {
            return !string.IsNullOrEmpty(Filename);
        }
        
        /// <summary>
        /// Test whether Reference should be serialized
        /// </summary>
        public virtual bool ShouldSerializeReference()
        {
            return !string.IsNullOrEmpty(Reference);
        }
        
        /// <summary>
        /// Test whether IfcProject should be serialized
        /// </summary>
        public virtual bool ShouldSerializeIfcProject()
        {
            return !string.IsNullOrEmpty(IfcProject);
        }
        
        /// <summary>
        /// Test whether IfcSpatialStructureElement should be serialized
        /// </summary>
        public virtual bool ShouldSerializeIfcSpatialStructureElement()
        {
            return !string.IsNullOrEmpty(IfcSpatialStructureElement);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current File object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an File object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output File object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out File obj, out Exception exception)
        {
            exception = null;
            obj = default(File);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out File obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static File Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((File)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static File Deserialize(Stream s)
        {
            return ((File)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current File object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an File object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output File object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out File obj, out Exception exception)
        {
            exception = null;
            obj = default(File);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out File obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static File LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    public partial class ViewPoint
    {
        #region Private fields
        private bool _shouldSerializeIndex;
        private string _viewpoint;
        private string _snapshot;
        private int? _index;
        private string _guid;
        private static XmlSerializer serializer;
        #endregion
        
        [XmlElement(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Viewpoint
        {
            get
            {
                return _viewpoint;
            }
            set
            {
                _viewpoint = value;
            }
        }
        
        [XmlElement(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Snapshot
        {
            get
            {
                return _snapshot;
            }
            set
            {
                _snapshot = value;
            }
        }
        
        [XmlElement(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int Index
        {
            get
            {
                if (_index.HasValue)
                {
                    return _index.Value;
                }
                else
                {
                    return default(int);
                }
            }
            set
            {
                _index = value;
                _shouldSerializeIndex = true;
            }
        }
        
        [XmlIgnore]
        public bool IndexSpecified
        {
            get
            {
                return _index.HasValue;
            }
            set
            {
                if (value==false)
                {
                    _index = null;
                }
            }
        }
        
        [XmlAttribute]
        public string Guid
        {
            get
            {
                return _guid;
            }
            set
            {
                _guid = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(ViewPoint));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether Index should be serialized
        /// </summary>
        public virtual bool ShouldSerializeIndex()
        {
            if (_shouldSerializeIndex)
            {
                return true;
            }
            return (_index != default(int));
        }
        
        /// <summary>
        /// Test whether Viewpoint should be serialized
        /// </summary>
        public virtual bool ShouldSerializeViewpoint()
        {
            return !string.IsNullOrEmpty(Viewpoint);
        }
        
        /// <summary>
        /// Test whether Snapshot should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSnapshot()
        {
            return !string.IsNullOrEmpty(Snapshot);
        }
        
        /// <summary>
        /// Test whether Guid should be serialized
        /// </summary>
        public virtual bool ShouldSerializeGuid()
        {
            return !string.IsNullOrEmpty(Guid);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ViewPoint object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ViewPoint object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ViewPoint object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ViewPoint obj, out Exception exception)
        {
            exception = null;
            obj = default(ViewPoint);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out ViewPoint obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static ViewPoint Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((ViewPoint)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static ViewPoint Deserialize(Stream s)
        {
            return ((ViewPoint)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current ViewPoint object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ViewPoint object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ViewPoint object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ViewPoint obj, out Exception exception)
        {
            exception = null;
            obj = default(ViewPoint);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ViewPoint obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ViewPoint LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    public partial class Comment
    {
        #region Private fields
        private bool _shouldSerializeModifiedDate;
        private bool _shouldSerializeDate;
        private System.DateTime _date;
        private string _author;
        private string _comment1;
        private CommentViewpoint _viewpoint;
        private DateTime? _modifiedDate;
        private string _modifiedAuthor;
        private string _guid;
        private static XmlSerializer serializer;
        #endregion
        
        [XmlElement(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime Date
        {
            get
            {
                return _date;
            }
            set
            {
                _date = value;
                _shouldSerializeDate = true;
            }
        }
        
        [XmlElement(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Author
        {
            get
            {
                return _author;
            }
            set
            {
                _author = value;
            }
        }
        
        [XmlElement("Comment", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Comment1
        {
            get
            {
                return _comment1;
            }
            set
            {
                _comment1 = value;
            }
        }
        
        [XmlElement(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public CommentViewpoint Viewpoint
        {
            get
            {
                if ((_viewpoint == null))
                {
                    _viewpoint = new CommentViewpoint();
                }
                return _viewpoint;
            }
            set
            {
                _viewpoint = value;
            }
        }
        
        [XmlElement(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime ModifiedDate
        {
            get
            {
                if (_modifiedDate.HasValue)
                {
                    return _modifiedDate.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                _modifiedDate = value;
                _shouldSerializeModifiedDate = true;
            }
        }
        
        [XmlIgnore]
        public bool ModifiedDateSpecified
        {
            get
            {
                return _modifiedDate.HasValue;
            }
            set
            {
                if (value==false)
                {
                    _modifiedDate = null;
                }
            }
        }
        
        [XmlElement(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ModifiedAuthor
        {
            get
            {
                return _modifiedAuthor;
            }
            set
            {
                _modifiedAuthor = value;
            }
        }
        
        [XmlAttribute]
        public string Guid
        {
            get
            {
                return _guid;
            }
            set
            {
                _guid = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(Comment));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether Date should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDate()
        {
            if (_shouldSerializeDate)
            {
                return true;
            }
            return (_date != default(System.DateTime));
        }
        
        /// <summary>
        /// Test whether ModifiedDate should be serialized
        /// </summary>
        public virtual bool ShouldSerializeModifiedDate()
        {
            if (_shouldSerializeModifiedDate)
            {
                return true;
            }
            return (_modifiedDate != default(System.DateTime));
        }
        
        /// <summary>
        /// Test whether Viewpoint should be serialized
        /// </summary>
        public virtual bool ShouldSerializeViewpoint()
        {
            return (_viewpoint != null);
        }
        
        /// <summary>
        /// Test whether Author should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAuthor()
        {
            return !string.IsNullOrEmpty(Author);
        }
        
        /// <summary>
        /// Test whether Comment1 should be serialized
        /// </summary>
        public virtual bool ShouldSerializeComment1()
        {
            return !string.IsNullOrEmpty(Comment1);
        }
        
        /// <summary>
        /// Test whether ModifiedAuthor should be serialized
        /// </summary>
        public virtual bool ShouldSerializeModifiedAuthor()
        {
            return !string.IsNullOrEmpty(ModifiedAuthor);
        }
        
        /// <summary>
        /// Test whether Guid should be serialized
        /// </summary>
        public virtual bool ShouldSerializeGuid()
        {
            return !string.IsNullOrEmpty(Guid);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Comment object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Comment object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Comment object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Comment obj, out Exception exception)
        {
            exception = null;
            obj = default(Comment);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Comment obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Comment Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Comment)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Comment Deserialize(Stream s)
        {
            return ((Comment)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Comment object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Comment object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Comment object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Comment obj, out Exception exception)
        {
            exception = null;
            obj = default(Comment);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Comment obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Comment LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [XmlTypeAttribute(AnonymousType=true)]
    public partial class CommentViewpoint
    {
        #region Private fields
        private string _guid;
        private static XmlSerializer serializer;
        #endregion
        
        [XmlAttribute]
        public string Guid
        {
            get
            {
                return _guid;
            }
            set
            {
                _guid = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(CommentViewpoint));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether Guid should be serialized
        /// </summary>
        public virtual bool ShouldSerializeGuid()
        {
            return !string.IsNullOrEmpty(Guid);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CommentViewpoint object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an CommentViewpoint object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output CommentViewpoint object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out CommentViewpoint obj, out Exception exception)
        {
            exception = null;
            obj = default(CommentViewpoint);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out CommentViewpoint obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static CommentViewpoint Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((CommentViewpoint)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static CommentViewpoint Deserialize(Stream s)
        {
            return ((CommentViewpoint)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current CommentViewpoint object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an CommentViewpoint object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CommentViewpoint object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out CommentViewpoint obj, out Exception exception)
        {
            exception = null;
            obj = default(CommentViewpoint);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out CommentViewpoint obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static CommentViewpoint LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    public partial class DocumentReference
    {
        #region Private fields
        private bool _shouldSerializeItemElementName;
        private string _item;
        private ItemChoiceType _itemElementName;
        private string _description;
        private string _guid;
        private static XmlSerializer serializer;
        #endregion
        
        [XmlElement("DocumentGuid", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [XmlElement("Url", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item
        {
            get
            {
                return _item;
            }
            set
            {
                _item = value;
            }
        }
        
        [XmlIgnore]
        public ItemChoiceType ItemElementName
        {
            get
            {
                return _itemElementName;
            }
            set
            {
                _itemElementName = value;
                _shouldSerializeItemElementName = true;
            }
        }
        
        [XmlElement(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }
        
        [XmlAttribute]
        public string Guid
        {
            get
            {
                return _guid;
            }
            set
            {
                _guid = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(DocumentReference));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether ItemElementName should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItemElementName()
        {
            if (_shouldSerializeItemElementName)
            {
                return true;
            }
            return (_itemElementName != default(ItemChoiceType));
        }
        
        /// <summary>
        /// Test whether Item should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItem()
        {
            return !string.IsNullOrEmpty(Item);
        }
        
        /// <summary>
        /// Test whether Description should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDescription()
        {
            return !string.IsNullOrEmpty(Description);
        }
        
        /// <summary>
        /// Test whether Guid should be serialized
        /// </summary>
        public virtual bool ShouldSerializeGuid()
        {
            return !string.IsNullOrEmpty(Guid);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DocumentReference object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an DocumentReference object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output DocumentReference object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out DocumentReference obj, out Exception exception)
        {
            exception = null;
            obj = default(DocumentReference);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out DocumentReference obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static DocumentReference Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((DocumentReference)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static DocumentReference Deserialize(Stream s)
        {
            return ((DocumentReference)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current DocumentReference object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an DocumentReference object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DocumentReference object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out DocumentReference obj, out Exception exception)
        {
            exception = null;
            obj = default(DocumentReference);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out DocumentReference obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static DocumentReference LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [XmlTypeAttribute(IncludeInSchema=false)]
    public enum ItemChoiceType
    {
        DocumentGuid,
        Url,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    public partial class BimSnippet
    {
        #region Private fields
        private bool _shouldSerializeIsExternal;
        private string _reference;
        private string _referenceSchema;
        private string _snippetType;
        private bool _isExternal;
        private static XmlSerializer serializer;
        #endregion
        
        /// <summary>
        /// BimSnippet class constructor
        /// </summary>
        public BimSnippet()
        {
            _isExternal = false;
        }
        
        [XmlElement(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Reference
        {
            get
            {
                return _reference;
            }
            set
            {
                _reference = value;
            }
        }
        
        [XmlElement(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ReferenceSchema
        {
            get
            {
                return _referenceSchema;
            }
            set
            {
                _referenceSchema = value;
            }
        }
        
        [XmlAttribute]
        public string SnippetType
        {
            get
            {
                return _snippetType;
            }
            set
            {
                _snippetType = value;
            }
        }
        
        [XmlAttribute]
        [DefaultValue(false)]
        public bool IsExternal
        {
            get
            {
                return _isExternal;
            }
            set
            {
                _isExternal = value;
                _shouldSerializeIsExternal = true;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(BimSnippet));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether IsExternal should be serialized
        /// </summary>
        public virtual bool ShouldSerializeIsExternal()
        {
            if (_shouldSerializeIsExternal)
            {
                return true;
            }
            return (_isExternal != default(bool));
        }
        
        /// <summary>
        /// Test whether Reference should be serialized
        /// </summary>
        public virtual bool ShouldSerializeReference()
        {
            return !string.IsNullOrEmpty(Reference);
        }
        
        /// <summary>
        /// Test whether ReferenceSchema should be serialized
        /// </summary>
        public virtual bool ShouldSerializeReferenceSchema()
        {
            return !string.IsNullOrEmpty(ReferenceSchema);
        }
        
        /// <summary>
        /// Test whether SnippetType should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSnippetType()
        {
            return !string.IsNullOrEmpty(SnippetType);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current BimSnippet object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an BimSnippet object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output BimSnippet object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out BimSnippet obj, out Exception exception)
        {
            exception = null;
            obj = default(BimSnippet);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out BimSnippet obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static BimSnippet Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((BimSnippet)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static BimSnippet Deserialize(Stream s)
        {
            return ((BimSnippet)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current BimSnippet object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an BimSnippet object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output BimSnippet object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out BimSnippet obj, out Exception exception)
        {
            exception = null;
            obj = default(BimSnippet);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out BimSnippet obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static BimSnippet LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    public partial class Topic
    {
        #region Private fields
        private bool _shouldSerializeDueDate;
        private bool _shouldSerializeModifiedDate;
        private bool _shouldSerializeCreationDate;
        private bool _shouldSerializeIndex;
        private List<string> _referenceLinks;
        private string _title;
        private string _priority;
        private int? _index;
        private List<string> _labels;
        private System.DateTime _creationDate;
        private string _creationAuthor;
        private DateTime? _modifiedDate;
        private string _modifiedAuthor;
        private DateTime? _dueDate;
        private string _assignedTo;
        private string _stage;
        private string _description;
        private BimSnippet _bimSnippet;
        private List<DocumentReference> _documentReferences;
        private List<TopicRelatedTopic> _relatedTopics;
        private List<Comment> _comments;
        private List<ViewPoint> _viewpoints;
        private string _guid;
        private string _serverAssignedId;
        private string _topicType;
        private string _topicStatus;
        private static XmlSerializer serializer;
        #endregion
        
        [XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [XmlArrayItemAttribute("ReferenceLink", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public List<string> ReferenceLinks
        {
            get
            {
                if ((_referenceLinks == null))
                {
                    _referenceLinks = new List<string>();
                }
                return _referenceLinks;
            }
            set
            {
                _referenceLinks = value;
            }
        }
        
        [XmlElement(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Title
        {
            get
            {
                return _title;
            }
            set
            {
                _title = value;
            }
        }
        
        [XmlElement(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Priority
        {
            get
            {
                return _priority;
            }
            set
            {
                _priority = value;
            }
        }
        
        [XmlElement(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int Index
        {
            get
            {
                if (_index.HasValue)
                {
                    return _index.Value;
                }
                else
                {
                    return default(int);
                }
            }
            set
            {
                _index = value;
                _shouldSerializeIndex = true;
            }
        }
        
        [XmlIgnore]
        public bool IndexSpecified
        {
            get
            {
                return _index.HasValue;
            }
            set
            {
                if (value==false)
                {
                    _index = null;
                }
            }
        }
        
        [XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [XmlArrayItemAttribute("Label", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public List<string> Labels
        {
            get
            {
                if ((_labels == null))
                {
                    _labels = new List<string>();
                }
                return _labels;
            }
            set
            {
                _labels = value;
            }
        }
        
        [XmlElement(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime CreationDate
        {
            get
            {
                return _creationDate;
            }
            set
            {
                _creationDate = value;
                _shouldSerializeCreationDate = true;
            }
        }
        
        [XmlElement(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string CreationAuthor
        {
            get
            {
                return _creationAuthor;
            }
            set
            {
                _creationAuthor = value;
            }
        }
        
        [XmlElement(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime ModifiedDate
        {
            get
            {
                if (_modifiedDate.HasValue)
                {
                    return _modifiedDate.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                _modifiedDate = value;
                _shouldSerializeModifiedDate = true;
            }
        }
        
        [XmlIgnore]
        public bool ModifiedDateSpecified
        {
            get
            {
                return _modifiedDate.HasValue;
            }
            set
            {
                if (value==false)
                {
                    _modifiedDate = null;
                }
            }
        }
        
        [XmlElement(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ModifiedAuthor
        {
            get
            {
                return _modifiedAuthor;
            }
            set
            {
                _modifiedAuthor = value;
            }
        }
        
        [XmlElement(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime DueDate
        {
            get
            {
                if (_dueDate.HasValue)
                {
                    return _dueDate.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                _dueDate = value;
                _shouldSerializeDueDate = true;
            }
        }
        
        [XmlIgnore]
        public bool DueDateSpecified
        {
            get
            {
                return _dueDate.HasValue;
            }
            set
            {
                if (value==false)
                {
                    _dueDate = null;
                }
            }
        }
        
        [XmlElement(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string AssignedTo
        {
            get
            {
                return _assignedTo;
            }
            set
            {
                _assignedTo = value;
            }
        }
        
        [XmlElement(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Stage
        {
            get
            {
                return _stage;
            }
            set
            {
                _stage = value;
            }
        }
        
        [XmlElement(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }
        
        [XmlElement(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public BimSnippet BimSnippet
        {
            get
            {
                if ((_bimSnippet == null))
                {
                    _bimSnippet = new BimSnippet();
                }
                return _bimSnippet;
            }
            set
            {
                _bimSnippet = value;
            }
        }
        
        [XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [XmlArrayItemAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public List<DocumentReference> DocumentReferences
        {
            get
            {
                if ((_documentReferences == null))
                {
                    _documentReferences = new List<DocumentReference>();
                }
                return _documentReferences;
            }
            set
            {
                _documentReferences = value;
            }
        }
        
        [XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [XmlArrayItemAttribute("RelatedTopic", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public List<TopicRelatedTopic> RelatedTopics
        {
            get
            {
                if ((_relatedTopics == null))
                {
                    _relatedTopics = new List<TopicRelatedTopic>();
                }
                return _relatedTopics;
            }
            set
            {
                _relatedTopics = value;
            }
        }
        
        [XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [XmlArrayItemAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public List<Comment> Comments
        {
            get
            {
                if ((_comments == null))
                {
                    _comments = new List<Comment>();
                }
                return _comments;
            }
            set
            {
                _comments = value;
            }
        }
        
        [XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [XmlArrayItemAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public List<ViewPoint> Viewpoints
        {
            get
            {
                if ((_viewpoints == null))
                {
                    _viewpoints = new List<ViewPoint>();
                }
                return _viewpoints;
            }
            set
            {
                _viewpoints = value;
            }
        }
        
        [XmlAttribute]
        public string Guid
        {
            get
            {
                return _guid;
            }
            set
            {
                _guid = value;
            }
        }
        
        [XmlAttribute]
        public string ServerAssignedId
        {
            get
            {
                return _serverAssignedId;
            }
            set
            {
                _serverAssignedId = value;
            }
        }
        
        [XmlAttribute]
        public string TopicType
        {
            get
            {
                return _topicType;
            }
            set
            {
                _topicType = value;
            }
        }
        
        [XmlAttribute]
        public string TopicStatus
        {
            get
            {
                return _topicStatus;
            }
            set
            {
                _topicStatus = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(Topic));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether ReferenceLinks should be serialized
        /// </summary>
        public virtual bool ShouldSerializeReferenceLinks()
        {
            return ReferenceLinks != null && ReferenceLinks.Count > 0;
        }
        
        /// <summary>
        /// Test whether Labels should be serialized
        /// </summary>
        public virtual bool ShouldSerializeLabels()
        {
            return Labels != null && Labels.Count > 0;
        }
        
        /// <summary>
        /// Test whether DocumentReferences should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDocumentReferences()
        {
            return DocumentReferences != null && DocumentReferences.Count > 0;
        }
        
        /// <summary>
        /// Test whether RelatedTopics should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRelatedTopics()
        {
            return RelatedTopics != null && RelatedTopics.Count > 0;
        }
        
        /// <summary>
        /// Test whether Comments should be serialized
        /// </summary>
        public virtual bool ShouldSerializeComments()
        {
            return Comments != null && Comments.Count > 0;
        }
        
        /// <summary>
        /// Test whether Viewpoints should be serialized
        /// </summary>
        public virtual bool ShouldSerializeViewpoints()
        {
            return Viewpoints != null && Viewpoints.Count > 0;
        }
        
        /// <summary>
        /// Test whether Index should be serialized
        /// </summary>
        public virtual bool ShouldSerializeIndex()
        {
            if (_shouldSerializeIndex)
            {
                return true;
            }
            return (_index != default(int));
        }
        
        /// <summary>
        /// Test whether CreationDate should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCreationDate()
        {
            if (_shouldSerializeCreationDate)
            {
                return true;
            }
            return (_creationDate != default(System.DateTime));
        }
        
        /// <summary>
        /// Test whether ModifiedDate should be serialized
        /// </summary>
        public virtual bool ShouldSerializeModifiedDate()
        {
            if (_shouldSerializeModifiedDate)
            {
                return true;
            }
            return (_modifiedDate != default(System.DateTime));
        }
        
        /// <summary>
        /// Test whether DueDate should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDueDate()
        {
            if (_shouldSerializeDueDate)
            {
                return true;
            }
            return (_dueDate != default(System.DateTime));
        }
        
        /// <summary>
        /// Test whether BimSnippet should be serialized
        /// </summary>
        public virtual bool ShouldSerializeBimSnippet()
        {
            return (_bimSnippet != null);
        }
        
        /// <summary>
        /// Test whether Title should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTitle()
        {
            return !string.IsNullOrEmpty(Title);
        }
        
        /// <summary>
        /// Test whether Priority should be serialized
        /// </summary>
        public virtual bool ShouldSerializePriority()
        {
            return !string.IsNullOrEmpty(Priority);
        }
        
        /// <summary>
        /// Test whether CreationAuthor should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCreationAuthor()
        {
            return !string.IsNullOrEmpty(CreationAuthor);
        }
        
        /// <summary>
        /// Test whether ModifiedAuthor should be serialized
        /// </summary>
        public virtual bool ShouldSerializeModifiedAuthor()
        {
            return !string.IsNullOrEmpty(ModifiedAuthor);
        }
        
        /// <summary>
        /// Test whether AssignedTo should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAssignedTo()
        {
            return !string.IsNullOrEmpty(AssignedTo);
        }
        
        /// <summary>
        /// Test whether Stage should be serialized
        /// </summary>
        public virtual bool ShouldSerializeStage()
        {
            return !string.IsNullOrEmpty(Stage);
        }
        
        /// <summary>
        /// Test whether Description should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDescription()
        {
            return !string.IsNullOrEmpty(Description);
        }
        
        /// <summary>
        /// Test whether Guid should be serialized
        /// </summary>
        public virtual bool ShouldSerializeGuid()
        {
            return !string.IsNullOrEmpty(Guid);
        }
        
        /// <summary>
        /// Test whether ServerAssignedId should be serialized
        /// </summary>
        public virtual bool ShouldSerializeServerAssignedId()
        {
            return !string.IsNullOrEmpty(ServerAssignedId);
        }
        
        /// <summary>
        /// Test whether TopicType should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTopicType()
        {
            return !string.IsNullOrEmpty(TopicType);
        }
        
        /// <summary>
        /// Test whether TopicStatus should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTopicStatus()
        {
            return !string.IsNullOrEmpty(TopicStatus);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Topic object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Topic object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Topic object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Topic obj, out Exception exception)
        {
            exception = null;
            obj = default(Topic);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Topic obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Topic Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Topic)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Topic Deserialize(Stream s)
        {
            return ((Topic)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Topic object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Topic object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Topic object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Topic obj, out Exception exception)
        {
            exception = null;
            obj = default(Topic);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Topic obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Topic LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [XmlTypeAttribute(AnonymousType=true)]
    public partial class TopicRelatedTopic
    {
        #region Private fields
        private string _guid;
        private static XmlSerializer serializer;
        #endregion
        
        [XmlAttribute]
        public string Guid
        {
            get
            {
                return _guid;
            }
            set
            {
                _guid = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(TopicRelatedTopic));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether Guid should be serialized
        /// </summary>
        public virtual bool ShouldSerializeGuid()
        {
            return !string.IsNullOrEmpty(Guid);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TopicRelatedTopic object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TopicRelatedTopic object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TopicRelatedTopic object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TopicRelatedTopic obj, out Exception exception)
        {
            exception = null;
            obj = default(TopicRelatedTopic);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TopicRelatedTopic obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TopicRelatedTopic Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((TopicRelatedTopic)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TopicRelatedTopic Deserialize(Stream s)
        {
            return ((TopicRelatedTopic)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TopicRelatedTopic object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TopicRelatedTopic object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TopicRelatedTopic object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TopicRelatedTopic obj, out Exception exception)
        {
            exception = null;
            obj = default(TopicRelatedTopic);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TopicRelatedTopic obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TopicRelatedTopic LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
}
#pragma warning restore
