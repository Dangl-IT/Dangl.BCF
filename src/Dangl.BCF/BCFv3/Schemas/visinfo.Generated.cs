// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.4.0.7
//    <NameSpace>Dangl.BCF.BCFv3.Schemas</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><DataMemberNameArg>OnlyIfDifferent</DataMemberNameArg><DataMemberOnXmlIgnore>False</DataMemberOnXmlIgnore><CodeBaseTag>Net45</CodeBaseTag><InitializeFields>All</InitializeFields><GenerateUnusedComplexTypes>False</GenerateUnusedComplexTypes><GenerateUnusedSimpleTypes>False</GenerateUnusedSimpleTypes><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableLazyLoading>True</EnableLazyLoading><VirtualProp>False</VirtualProp><PascalCase>False</PascalCase><AutomaticProperties>False</AutomaticProperties><PropNameSpecified>Default</PropNameSpecified><PrivateFieldName>StartWithUnderscore</PrivateFieldName><PrivateFieldNamePrefix></PrivateFieldNamePrefix><EnableRestriction>True</EnableRestriction><RestrictionMaxLenght>True</RestrictionMaxLenght><RestrictionRegEx>True</RestrictionRegEx><RestrictionRange>True</RestrictionRange><ValidateProperty>False</ValidateProperty><ClassNamePrefix></ClassNamePrefix><ClassLevel>Public</ClassLevel><PartialClass>True</PartialClass><ClassesInSeparateFiles>False</ClassesInSeparateFiles><ClassesInSeparateFilesDir></ClassesInSeparateFilesDir><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><EnableAppInfoSettings>False</EnableAppInfoSettings><EnableExternalSchemasCache>False</EnableExternalSchemasCache><EnableDebug>True</EnableDebug><EnableWarn>False</EnableWarn><ExcludeImportedTypes>False</ExcludeImportedTypes><ExpandNesteadAttributeGroup>False</ExpandNesteadAttributeGroup><CleanupCode>True</CleanupCode><EnableXmlSerialization>True</EnableXmlSerialization><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><EnableEncoding>False</EnableEncoding><EnableXMLIndent>True</EnableXMLIndent><IndentChar>Indent2Space</IndentChar><NewLineAttr>False</NewLineAttr><OmitXML>False</OmitXML><Encoder>UTF8</Encoder><Serializer>XmlSerializer</Serializer><sspNullable>True</sspNullable><sspString>True</sspString><sspCollection>True</sspCollection><sspComplexType>True</sspComplexType><sspSimpleType>True</sspSimpleType><sspEnumType>True</sspEnumType><XmlSerializerEvent>False</XmlSerializerEvent><BaseClassName>EntityBase</BaseClassName><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><CustomUsings></CustomUsings><AttributesToExlude></AttributesToExlude>
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace Dangl.BCF.BCFv3.Schemas
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.ComponentModel.DataAnnotations;
    using System.Xml;
    using System.Collections.Generic;
    
    
    /// <summary>
    /// VisualizationInfo documentation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [XmlTypeAttribute(AnonymousType=true)]
    [XmlRootAttribute(Namespace="", IsNullable=false)]
    public partial class VisualizationInfo
    {
        #region Private fields
        private bool _shouldSerializeItem;
        private Components _components;
        private object _item;
        private List<Line> _lines;
        private List<ClippingPlane> _clippingPlanes;
        private List<Bitmap> _bitmaps;
        private string _guid;
        private static XmlSerializer serializer;
        #endregion
        
        public Components Components
        {
            get
            {
                if ((_components == null))
                {
                    _components = new Components();
                }
                return _components;
            }
            set
            {
                _components = value;
            }
        }
        
        [XmlElement("OrthogonalCamera", typeof(OrthogonalCamera))]
        [XmlElement("PerspectiveCamera", typeof(PerspectiveCamera))]
        public object Item
        {
            get
            {
                return _item;
            }
            set
            {
                _item = value;
                _shouldSerializeItem = true;
            }
        }
        
        [XmlArrayItemAttribute(IsNullable=false)]
        public List<Line> Lines
        {
            get
            {
                if ((_lines == null))
                {
                    _lines = new List<Line>();
                }
                return _lines;
            }
            set
            {
                _lines = value;
            }
        }
        
        [XmlArrayItemAttribute(IsNullable=false)]
        public List<ClippingPlane> ClippingPlanes
        {
            get
            {
                if ((_clippingPlanes == null))
                {
                    _clippingPlanes = new List<ClippingPlane>();
                }
                return _clippingPlanes;
            }
            set
            {
                _clippingPlanes = value;
            }
        }
        
        [XmlArrayItemAttribute(IsNullable=false)]
        public List<Bitmap> Bitmaps
        {
            get
            {
                if ((_bitmaps == null))
                {
                    _bitmaps = new List<Bitmap>();
                }
                return _bitmaps;
            }
            set
            {
                _bitmaps = value;
            }
        }
        
        [XmlAttribute]
        public string Guid
        {
            get
            {
                return _guid;
            }
            set
            {
                _guid = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(VisualizationInfo));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether Lines should be serialized
        /// </summary>
        public virtual bool ShouldSerializeLines()
        {
            return Lines != null && Lines.Count > 0;
        }
        
        /// <summary>
        /// Test whether ClippingPlanes should be serialized
        /// </summary>
        public virtual bool ShouldSerializeClippingPlanes()
        {
            return ClippingPlanes != null && ClippingPlanes.Count > 0;
        }
        
        /// <summary>
        /// Test whether Bitmaps should be serialized
        /// </summary>
        public virtual bool ShouldSerializeBitmaps()
        {
            return Bitmaps != null && Bitmaps.Count > 0;
        }
        
        /// <summary>
        /// Test whether Item should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItem()
        {
            if (_shouldSerializeItem)
            {
                return true;
            }
            return (_item != default(object));
        }
        
        /// <summary>
        /// Test whether Components should be serialized
        /// </summary>
        public virtual bool ShouldSerializeComponents()
        {
            return (_components != null);
        }
        
        /// <summary>
        /// Test whether Guid should be serialized
        /// </summary>
        public virtual bool ShouldSerializeGuid()
        {
            return !string.IsNullOrEmpty(Guid);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current VisualizationInfo object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an VisualizationInfo object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output VisualizationInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out VisualizationInfo obj, out Exception exception)
        {
            exception = null;
            obj = default(VisualizationInfo);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out VisualizationInfo obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static VisualizationInfo Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((VisualizationInfo)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static VisualizationInfo Deserialize(Stream s)
        {
            return ((VisualizationInfo)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current VisualizationInfo object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an VisualizationInfo object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output VisualizationInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out VisualizationInfo obj, out Exception exception)
        {
            exception = null;
            obj = default(VisualizationInfo);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out VisualizationInfo obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static VisualizationInfo LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    public partial class Components
    {
        #region Private fields
        private List<Component> _selection;
        private ComponentVisibility _visibility;
        private List<ComponentColoringColor> _coloring;
        private static XmlSerializer serializer;
        #endregion
        
        [XmlArrayItemAttribute(IsNullable=false)]
        public List<Component> Selection
        {
            get
            {
                if ((_selection == null))
                {
                    _selection = new List<Component>();
                }
                return _selection;
            }
            set
            {
                _selection = value;
            }
        }
        
        public ComponentVisibility Visibility
        {
            get
            {
                if ((_visibility == null))
                {
                    _visibility = new ComponentVisibility();
                }
                return _visibility;
            }
            set
            {
                _visibility = value;
            }
        }
        
        [XmlArrayItemAttribute("Color", IsNullable=false)]
        public List<ComponentColoringColor> Coloring
        {
            get
            {
                if ((_coloring == null))
                {
                    _coloring = new List<ComponentColoringColor>();
                }
                return _coloring;
            }
            set
            {
                _coloring = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(Components));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether Selection should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSelection()
        {
            return Selection != null && Selection.Count > 0;
        }
        
        /// <summary>
        /// Test whether Coloring should be serialized
        /// </summary>
        public virtual bool ShouldSerializeColoring()
        {
            return Coloring != null && Coloring.Count > 0;
        }
        
        /// <summary>
        /// Test whether Visibility should be serialized
        /// </summary>
        public virtual bool ShouldSerializeVisibility()
        {
            return (_visibility != null);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Components object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Components object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Components object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Components obj, out Exception exception)
        {
            exception = null;
            obj = default(Components);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Components obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Components Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Components)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Components Deserialize(Stream s)
        {
            return ((Components)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Components object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Components object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Components object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Components obj, out Exception exception)
        {
            exception = null;
            obj = default(Components);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Components obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Components LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    public partial class Component
    {
        #region Private fields
        private string _originatingSystem;
        private string _authoringToolId;
        private string _ifcGuid;
        private static XmlSerializer serializer;
        #endregion
        
        public string OriginatingSystem
        {
            get
            {
                return _originatingSystem;
            }
            set
            {
                _originatingSystem = value;
            }
        }
        
        public string AuthoringToolId
        {
            get
            {
                return _authoringToolId;
            }
            set
            {
                _authoringToolId = value;
            }
        }
        
        [XmlAttribute(DataType="normalizedString")]
        public string IfcGuid
        {
            get
            {
                return _ifcGuid;
            }
            set
            {
                _ifcGuid = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(Component));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether OriginatingSystem should be serialized
        /// </summary>
        public virtual bool ShouldSerializeOriginatingSystem()
        {
            return !string.IsNullOrEmpty(OriginatingSystem);
        }
        
        /// <summary>
        /// Test whether AuthoringToolId should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAuthoringToolId()
        {
            return !string.IsNullOrEmpty(AuthoringToolId);
        }
        
        /// <summary>
        /// Test whether IfcGuid should be serialized
        /// </summary>
        public virtual bool ShouldSerializeIfcGuid()
        {
            return !string.IsNullOrEmpty(IfcGuid);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Component object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Component object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Component object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Component obj, out Exception exception)
        {
            exception = null;
            obj = default(Component);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Component obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Component Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Component)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Component Deserialize(Stream s)
        {
            return ((Component)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Component object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Component object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Component object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Component obj, out Exception exception)
        {
            exception = null;
            obj = default(Component);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Component obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Component LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    public partial class Bitmap
    {
        #region Private fields
        private bool _shouldSerializeFormat;
        private bool _shouldSerializeHeight;
        private BitmapFormat _format;
        private string _reference;
        private Point _location;
        private Direction _normal;
        private Direction _up;
        private double _height;
        private static XmlSerializer serializer;
        #endregion
        
        public BitmapFormat Format
        {
            get
            {
                return _format;
            }
            set
            {
                _format = value;
                _shouldSerializeFormat = true;
            }
        }
        
        public string Reference
        {
            get
            {
                return _reference;
            }
            set
            {
                _reference = value;
            }
        }
        
        public Point Location
        {
            get
            {
                if ((_location == null))
                {
                    _location = new Point();
                }
                return _location;
            }
            set
            {
                _location = value;
            }
        }
        
        public Direction Normal
        {
            get
            {
                if ((_normal == null))
                {
                    _normal = new Direction();
                }
                return _normal;
            }
            set
            {
                _normal = value;
            }
        }
        
        public Direction Up
        {
            get
            {
                if ((_up == null))
                {
                    _up = new Direction();
                }
                return _up;
            }
            set
            {
                _up = value;
            }
        }
        
        public double Height
        {
            get
            {
                return _height;
            }
            set
            {
                _height = value;
                _shouldSerializeHeight = true;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(Bitmap));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether Height should be serialized
        /// </summary>
        public virtual bool ShouldSerializeHeight()
        {
            if (_shouldSerializeHeight)
            {
                return true;
            }
            return (_height != default(double));
        }
        
        /// <summary>
        /// Test whether Format should be serialized
        /// </summary>
        public virtual bool ShouldSerializeFormat()
        {
            if (_shouldSerializeFormat)
            {
                return true;
            }
            return (_format != default(BitmapFormat));
        }
        
        /// <summary>
        /// Test whether Location should be serialized
        /// </summary>
        public virtual bool ShouldSerializeLocation()
        {
            return (_location != null);
        }
        
        /// <summary>
        /// Test whether Normal should be serialized
        /// </summary>
        public virtual bool ShouldSerializeNormal()
        {
            return (_normal != null);
        }
        
        /// <summary>
        /// Test whether Up should be serialized
        /// </summary>
        public virtual bool ShouldSerializeUp()
        {
            return (_up != null);
        }
        
        /// <summary>
        /// Test whether Reference should be serialized
        /// </summary>
        public virtual bool ShouldSerializeReference()
        {
            return !string.IsNullOrEmpty(Reference);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Bitmap object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Bitmap object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Bitmap object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Bitmap obj, out Exception exception)
        {
            exception = null;
            obj = default(Bitmap);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Bitmap obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Bitmap Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Bitmap)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Bitmap Deserialize(Stream s)
        {
            return ((Bitmap)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Bitmap object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Bitmap object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Bitmap object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Bitmap obj, out Exception exception)
        {
            exception = null;
            obj = default(Bitmap);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Bitmap obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Bitmap LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    public enum BitmapFormat
    {
        png,
        jpg,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    public partial class Point
    {
        #region Private fields
        private bool _shouldSerializeZ;
        private bool _shouldSerializeY;
        private bool _shouldSerializeX;
        private double _x;
        private double _y;
        private double _z;
        private static XmlSerializer serializer;
        #endregion
        
        public double X
        {
            get
            {
                return _x;
            }
            set
            {
                _x = value;
                _shouldSerializeX = true;
            }
        }
        
        public double Y
        {
            get
            {
                return _y;
            }
            set
            {
                _y = value;
                _shouldSerializeY = true;
            }
        }
        
        public double Z
        {
            get
            {
                return _z;
            }
            set
            {
                _z = value;
                _shouldSerializeZ = true;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(Point));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether X should be serialized
        /// </summary>
        public virtual bool ShouldSerializeX()
        {
            if (_shouldSerializeX)
            {
                return true;
            }
            return (_x != default(double));
        }
        
        /// <summary>
        /// Test whether Y should be serialized
        /// </summary>
        public virtual bool ShouldSerializeY()
        {
            if (_shouldSerializeY)
            {
                return true;
            }
            return (_y != default(double));
        }
        
        /// <summary>
        /// Test whether Z should be serialized
        /// </summary>
        public virtual bool ShouldSerializeZ()
        {
            if (_shouldSerializeZ)
            {
                return true;
            }
            return (_z != default(double));
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Point object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Point object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Point object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Point obj, out Exception exception)
        {
            exception = null;
            obj = default(Point);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Point obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Point Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Point)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Point Deserialize(Stream s)
        {
            return ((Point)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Point object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Point object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Point object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Point obj, out Exception exception)
        {
            exception = null;
            obj = default(Point);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Point obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Point LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    public partial class Direction
    {
        #region Private fields
        private bool _shouldSerializeZ;
        private bool _shouldSerializeY;
        private bool _shouldSerializeX;
        private double _x;
        private double _y;
        private double _z;
        private static XmlSerializer serializer;
        #endregion
        
        public double X
        {
            get
            {
                return _x;
            }
            set
            {
                _x = value;
                _shouldSerializeX = true;
            }
        }
        
        public double Y
        {
            get
            {
                return _y;
            }
            set
            {
                _y = value;
                _shouldSerializeY = true;
            }
        }
        
        public double Z
        {
            get
            {
                return _z;
            }
            set
            {
                _z = value;
                _shouldSerializeZ = true;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(Direction));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether X should be serialized
        /// </summary>
        public virtual bool ShouldSerializeX()
        {
            if (_shouldSerializeX)
            {
                return true;
            }
            return (_x != default(double));
        }
        
        /// <summary>
        /// Test whether Y should be serialized
        /// </summary>
        public virtual bool ShouldSerializeY()
        {
            if (_shouldSerializeY)
            {
                return true;
            }
            return (_y != default(double));
        }
        
        /// <summary>
        /// Test whether Z should be serialized
        /// </summary>
        public virtual bool ShouldSerializeZ()
        {
            if (_shouldSerializeZ)
            {
                return true;
            }
            return (_z != default(double));
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Direction object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Direction object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Direction object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Direction obj, out Exception exception)
        {
            exception = null;
            obj = default(Direction);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Direction obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Direction Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Direction)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Direction Deserialize(Stream s)
        {
            return ((Direction)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Direction object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Direction object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Direction object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Direction obj, out Exception exception)
        {
            exception = null;
            obj = default(Direction);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Direction obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Direction LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    public partial class ClippingPlane
    {
        #region Private fields
        private Point _location;
        private Direction _direction;
        private static XmlSerializer serializer;
        #endregion
        
        public Point Location
        {
            get
            {
                if ((_location == null))
                {
                    _location = new Point();
                }
                return _location;
            }
            set
            {
                _location = value;
            }
        }
        
        public Direction Direction
        {
            get
            {
                if ((_direction == null))
                {
                    _direction = new Direction();
                }
                return _direction;
            }
            set
            {
                _direction = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(ClippingPlane));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether Location should be serialized
        /// </summary>
        public virtual bool ShouldSerializeLocation()
        {
            return (_location != null);
        }
        
        /// <summary>
        /// Test whether Direction should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDirection()
        {
            return (_direction != null);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ClippingPlane object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ClippingPlane object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ClippingPlane object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ClippingPlane obj, out Exception exception)
        {
            exception = null;
            obj = default(ClippingPlane);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out ClippingPlane obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static ClippingPlane Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((ClippingPlane)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static ClippingPlane Deserialize(Stream s)
        {
            return ((ClippingPlane)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current ClippingPlane object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ClippingPlane object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ClippingPlane object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ClippingPlane obj, out Exception exception)
        {
            exception = null;
            obj = default(ClippingPlane);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ClippingPlane obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ClippingPlane LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    public partial class Line
    {
        #region Private fields
        private Point _startPoint;
        private Point _endPoint;
        private static XmlSerializer serializer;
        #endregion
        
        public Point StartPoint
        {
            get
            {
                if ((_startPoint == null))
                {
                    _startPoint = new Point();
                }
                return _startPoint;
            }
            set
            {
                _startPoint = value;
            }
        }
        
        public Point EndPoint
        {
            get
            {
                if ((_endPoint == null))
                {
                    _endPoint = new Point();
                }
                return _endPoint;
            }
            set
            {
                _endPoint = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(Line));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether StartPoint should be serialized
        /// </summary>
        public virtual bool ShouldSerializeStartPoint()
        {
            return (_startPoint != null);
        }
        
        /// <summary>
        /// Test whether EndPoint should be serialized
        /// </summary>
        public virtual bool ShouldSerializeEndPoint()
        {
            return (_endPoint != null);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Line object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Line object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Line object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Line obj, out Exception exception)
        {
            exception = null;
            obj = default(Line);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Line obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Line Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Line)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Line Deserialize(Stream s)
        {
            return ((Line)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Line object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Line object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Line object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Line obj, out Exception exception)
        {
            exception = null;
            obj = default(Line);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Line obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Line LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    public partial class PerspectiveCamera
    {
        #region Private fields
        private bool _shouldSerializeAspectRatio;
        private bool _shouldSerializeFieldOfView;
        private Point _cameraViewPoint;
        private Direction _cameraDirection;
        private Direction _cameraUpVector;
        private double _fieldOfView;
        private double _aspectRatio;
        private static XmlSerializer serializer;
        #endregion
        
        public Point CameraViewPoint
        {
            get
            {
                if ((_cameraViewPoint == null))
                {
                    _cameraViewPoint = new Point();
                }
                return _cameraViewPoint;
            }
            set
            {
                _cameraViewPoint = value;
            }
        }
        
        public Direction CameraDirection
        {
            get
            {
                if ((_cameraDirection == null))
                {
                    _cameraDirection = new Direction();
                }
                return _cameraDirection;
            }
            set
            {
                _cameraDirection = value;
            }
        }
        
        public Direction CameraUpVector
        {
            get
            {
                if ((_cameraUpVector == null))
                {
                    _cameraUpVector = new Direction();
                }
                return _cameraUpVector;
            }
            set
            {
                _cameraUpVector = value;
            }
        }
        
        /// <summary>
        /// Vertical field of view, in degrees.
        /// </summary>
        public double FieldOfView
        {
            get
            {
                return _fieldOfView;
            }
            set
            {
                _fieldOfView = value;
                _shouldSerializeFieldOfView = true;
            }
        }
        
        /// <summary>
        /// Proportional relationship between the width and the height of the view (w/h).
        /// </summary>
        public double AspectRatio
        {
            get
            {
                return _aspectRatio;
            }
            set
            {
                _aspectRatio = value;
                _shouldSerializeAspectRatio = true;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(PerspectiveCamera));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether FieldOfView should be serialized
        /// </summary>
        public virtual bool ShouldSerializeFieldOfView()
        {
            if (_shouldSerializeFieldOfView)
            {
                return true;
            }
            return (_fieldOfView != default(double));
        }
        
        /// <summary>
        /// Test whether AspectRatio should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAspectRatio()
        {
            if (_shouldSerializeAspectRatio)
            {
                return true;
            }
            return (_aspectRatio != default(double));
        }
        
        /// <summary>
        /// Test whether CameraViewPoint should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCameraViewPoint()
        {
            return (_cameraViewPoint != null);
        }
        
        /// <summary>
        /// Test whether CameraDirection should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCameraDirection()
        {
            return (_cameraDirection != null);
        }
        
        /// <summary>
        /// Test whether CameraUpVector should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCameraUpVector()
        {
            return (_cameraUpVector != null);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PerspectiveCamera object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PerspectiveCamera object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output PerspectiveCamera object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out PerspectiveCamera obj, out Exception exception)
        {
            exception = null;
            obj = default(PerspectiveCamera);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out PerspectiveCamera obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static PerspectiveCamera Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((PerspectiveCamera)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static PerspectiveCamera Deserialize(Stream s)
        {
            return ((PerspectiveCamera)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current PerspectiveCamera object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PerspectiveCamera object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PerspectiveCamera object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PerspectiveCamera obj, out Exception exception)
        {
            exception = null;
            obj = default(PerspectiveCamera);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PerspectiveCamera obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PerspectiveCamera LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    public partial class OrthogonalCamera
    {
        #region Private fields
        private bool _shouldSerializeAspectRatio;
        private bool _shouldSerializeViewToWorldScale;
        private Point _cameraViewPoint;
        private Direction _cameraDirection;
        private Direction _cameraUpVector;
        private double _viewToWorldScale;
        private double _aspectRatio;
        private static XmlSerializer serializer;
        #endregion
        
        public Point CameraViewPoint
        {
            get
            {
                if ((_cameraViewPoint == null))
                {
                    _cameraViewPoint = new Point();
                }
                return _cameraViewPoint;
            }
            set
            {
                _cameraViewPoint = value;
            }
        }
        
        public Direction CameraDirection
        {
            get
            {
                if ((_cameraDirection == null))
                {
                    _cameraDirection = new Direction();
                }
                return _cameraDirection;
            }
            set
            {
                _cameraDirection = value;
            }
        }
        
        public Direction CameraUpVector
        {
            get
            {
                if ((_cameraUpVector == null))
                {
                    _cameraUpVector = new Direction();
                }
                return _cameraUpVector;
            }
            set
            {
                _cameraUpVector = value;
            }
        }
        
        /// <summary>
        /// view's visible vertical size in meters
        /// </summary>
        public double ViewToWorldScale
        {
            get
            {
                return _viewToWorldScale;
            }
            set
            {
                _viewToWorldScale = value;
                _shouldSerializeViewToWorldScale = true;
            }
        }
        
        /// <summary>
        /// Proportional relationship between the width and the height of the view (w/h).
        /// </summary>
        public double AspectRatio
        {
            get
            {
                return _aspectRatio;
            }
            set
            {
                _aspectRatio = value;
                _shouldSerializeAspectRatio = true;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(OrthogonalCamera));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether ViewToWorldScale should be serialized
        /// </summary>
        public virtual bool ShouldSerializeViewToWorldScale()
        {
            if (_shouldSerializeViewToWorldScale)
            {
                return true;
            }
            return (_viewToWorldScale != default(double));
        }
        
        /// <summary>
        /// Test whether AspectRatio should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAspectRatio()
        {
            if (_shouldSerializeAspectRatio)
            {
                return true;
            }
            return (_aspectRatio != default(double));
        }
        
        /// <summary>
        /// Test whether CameraViewPoint should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCameraViewPoint()
        {
            return (_cameraViewPoint != null);
        }
        
        /// <summary>
        /// Test whether CameraDirection should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCameraDirection()
        {
            return (_cameraDirection != null);
        }
        
        /// <summary>
        /// Test whether CameraUpVector should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCameraUpVector()
        {
            return (_cameraUpVector != null);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current OrthogonalCamera object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an OrthogonalCamera object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output OrthogonalCamera object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out OrthogonalCamera obj, out Exception exception)
        {
            exception = null;
            obj = default(OrthogonalCamera);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out OrthogonalCamera obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static OrthogonalCamera Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((OrthogonalCamera)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static OrthogonalCamera Deserialize(Stream s)
        {
            return ((OrthogonalCamera)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current OrthogonalCamera object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an OrthogonalCamera object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output OrthogonalCamera object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out OrthogonalCamera obj, out Exception exception)
        {
            exception = null;
            obj = default(OrthogonalCamera);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out OrthogonalCamera obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static OrthogonalCamera LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    public partial class ViewSetupHints
    {
        #region Private fields
        private bool _shouldSerializeOpeningsVisible;
        private bool _shouldSerializeSpaceBoundariesVisible;
        private bool _shouldSerializeSpacesVisible;
        private bool _spacesVisible;
        private bool _spaceBoundariesVisible;
        private bool _openingsVisible;
        private static XmlSerializer serializer;
        #endregion
        
        /// <summary>
        /// ViewSetupHints class constructor
        /// </summary>
        public ViewSetupHints()
        {
            _spacesVisible = false;
            _spaceBoundariesVisible = false;
            _openingsVisible = false;
        }
        
        [XmlAttribute]
        [DefaultValue(false)]
        public bool SpacesVisible
        {
            get
            {
                return _spacesVisible;
            }
            set
            {
                _spacesVisible = value;
                _shouldSerializeSpacesVisible = true;
            }
        }
        
        [XmlAttribute]
        [DefaultValue(false)]
        public bool SpaceBoundariesVisible
        {
            get
            {
                return _spaceBoundariesVisible;
            }
            set
            {
                _spaceBoundariesVisible = value;
                _shouldSerializeSpaceBoundariesVisible = true;
            }
        }
        
        [XmlAttribute]
        [DefaultValue(false)]
        public bool OpeningsVisible
        {
            get
            {
                return _openingsVisible;
            }
            set
            {
                _openingsVisible = value;
                _shouldSerializeOpeningsVisible = true;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(ViewSetupHints));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether SpacesVisible should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSpacesVisible()
        {
            if (_shouldSerializeSpacesVisible)
            {
                return true;
            }
            return (_spacesVisible != default(bool));
        }
        
        /// <summary>
        /// Test whether SpaceBoundariesVisible should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSpaceBoundariesVisible()
        {
            if (_shouldSerializeSpaceBoundariesVisible)
            {
                return true;
            }
            return (_spaceBoundariesVisible != default(bool));
        }
        
        /// <summary>
        /// Test whether OpeningsVisible should be serialized
        /// </summary>
        public virtual bool ShouldSerializeOpeningsVisible()
        {
            if (_shouldSerializeOpeningsVisible)
            {
                return true;
            }
            return (_openingsVisible != default(bool));
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ViewSetupHints object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ViewSetupHints object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ViewSetupHints object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ViewSetupHints obj, out Exception exception)
        {
            exception = null;
            obj = default(ViewSetupHints);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out ViewSetupHints obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static ViewSetupHints Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((ViewSetupHints)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static ViewSetupHints Deserialize(Stream s)
        {
            return ((ViewSetupHints)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current ViewSetupHints object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ViewSetupHints object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ViewSetupHints object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ViewSetupHints obj, out Exception exception)
        {
            exception = null;
            obj = default(ViewSetupHints);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ViewSetupHints obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ViewSetupHints LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    public partial class ComponentVisibility
    {
        #region Private fields
        private bool _shouldSerializeDefaultVisibility;
        private ViewSetupHints _viewSetupHints;
        private List<Component> _exceptions;
        private bool _defaultVisibility;
        private static XmlSerializer serializer;
        #endregion
        
        /// <summary>
        /// ComponentVisibility class constructor
        /// </summary>
        public ComponentVisibility()
        {
            _defaultVisibility = false;
        }
        
        public ViewSetupHints ViewSetupHints
        {
            get
            {
                if ((_viewSetupHints == null))
                {
                    _viewSetupHints = new ViewSetupHints();
                }
                return _viewSetupHints;
            }
            set
            {
                _viewSetupHints = value;
            }
        }
        
        [XmlArrayItemAttribute(IsNullable=false)]
        public List<Component> Exceptions
        {
            get
            {
                if ((_exceptions == null))
                {
                    _exceptions = new List<Component>();
                }
                return _exceptions;
            }
            set
            {
                _exceptions = value;
            }
        }
        
        [XmlAttribute]
        [DefaultValue(false)]
        public bool DefaultVisibility
        {
            get
            {
                return _defaultVisibility;
            }
            set
            {
                _defaultVisibility = value;
                _shouldSerializeDefaultVisibility = true;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(ComponentVisibility));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether Exceptions should be serialized
        /// </summary>
        public virtual bool ShouldSerializeExceptions()
        {
            return Exceptions != null && Exceptions.Count > 0;
        }
        
        /// <summary>
        /// Test whether DefaultVisibility should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDefaultVisibility()
        {
            if (_shouldSerializeDefaultVisibility)
            {
                return true;
            }
            return (_defaultVisibility != default(bool));
        }
        
        /// <summary>
        /// Test whether ViewSetupHints should be serialized
        /// </summary>
        public virtual bool ShouldSerializeViewSetupHints()
        {
            return (_viewSetupHints != null);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ComponentVisibility object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ComponentVisibility object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ComponentVisibility object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ComponentVisibility obj, out Exception exception)
        {
            exception = null;
            obj = default(ComponentVisibility);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out ComponentVisibility obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static ComponentVisibility Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((ComponentVisibility)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static ComponentVisibility Deserialize(Stream s)
        {
            return ((ComponentVisibility)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current ComponentVisibility object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ComponentVisibility object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ComponentVisibility object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ComponentVisibility obj, out Exception exception)
        {
            exception = null;
            obj = default(ComponentVisibility);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ComponentVisibility obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ComponentVisibility LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [XmlTypeAttribute(AnonymousType=true)]
    public partial class ComponentColoringColor
    {
        #region Private fields
        private List<Component> _components;
        private string _color;
        private static XmlSerializer serializer;
        #endregion
        
        [XmlArrayItemAttribute(IsNullable=false)]
        public List<Component> Components
        {
            get
            {
                if ((_components == null))
                {
                    _components = new List<Component>();
                }
                return _components;
            }
            set
            {
                _components = value;
            }
        }
        
        [XmlAttribute(DataType="normalizedString")]
        public string Color
        {
            get
            {
                return _color;
            }
            set
            {
                _color = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(ComponentColoringColor));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether Components should be serialized
        /// </summary>
        public virtual bool ShouldSerializeComponents()
        {
            return Components != null && Components.Count > 0;
        }
        
        /// <summary>
        /// Test whether Color should be serialized
        /// </summary>
        public virtual bool ShouldSerializeColor()
        {
            return !string.IsNullOrEmpty(Color);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ComponentColoringColor object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ComponentColoringColor object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ComponentColoringColor object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ComponentColoringColor obj, out Exception exception)
        {
            exception = null;
            obj = default(ComponentColoringColor);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out ComponentColoringColor obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static ComponentColoringColor Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((ComponentColoringColor)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static ComponentColoringColor Deserialize(Stream s)
        {
            return ((ComponentColoringColor)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current ComponentColoringColor object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ComponentColoringColor object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ComponentColoringColor object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ComponentColoringColor obj, out Exception exception)
        {
            exception = null;
            obj = default(ComponentColoringColor);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ComponentColoringColor obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ComponentColoringColor LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
}
#pragma warning restore
