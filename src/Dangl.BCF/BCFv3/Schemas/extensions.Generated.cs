// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.4.0.7
//    <NameSpace>Dangl.BCF.BCFv3.Schemas</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><DataMemberNameArg>OnlyIfDifferent</DataMemberNameArg><DataMemberOnXmlIgnore>False</DataMemberOnXmlIgnore><CodeBaseTag>Net45</CodeBaseTag><InitializeFields>All</InitializeFields><GenerateUnusedComplexTypes>False</GenerateUnusedComplexTypes><GenerateUnusedSimpleTypes>False</GenerateUnusedSimpleTypes><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableLazyLoading>True</EnableLazyLoading><VirtualProp>False</VirtualProp><PascalCase>False</PascalCase><AutomaticProperties>False</AutomaticProperties><PropNameSpecified>Default</PropNameSpecified><PrivateFieldName>StartWithUnderscore</PrivateFieldName><PrivateFieldNamePrefix></PrivateFieldNamePrefix><EnableRestriction>True</EnableRestriction><RestrictionMaxLenght>True</RestrictionMaxLenght><RestrictionRegEx>True</RestrictionRegEx><RestrictionRange>True</RestrictionRange><ValidateProperty>False</ValidateProperty><ClassNamePrefix></ClassNamePrefix><ClassLevel>Public</ClassLevel><PartialClass>True</PartialClass><ClassesInSeparateFiles>False</ClassesInSeparateFiles><ClassesInSeparateFilesDir></ClassesInSeparateFilesDir><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><EnableAppInfoSettings>False</EnableAppInfoSettings><EnableExternalSchemasCache>False</EnableExternalSchemasCache><EnableDebug>True</EnableDebug><EnableWarn>False</EnableWarn><ExcludeImportedTypes>False</ExcludeImportedTypes><ExpandNesteadAttributeGroup>False</ExpandNesteadAttributeGroup><CleanupCode>True</CleanupCode><EnableXmlSerialization>True</EnableXmlSerialization><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><EnableEncoding>False</EnableEncoding><EnableXMLIndent>True</EnableXMLIndent><IndentChar>Indent2Space</IndentChar><NewLineAttr>False</NewLineAttr><OmitXML>False</OmitXML><Encoder>UTF8</Encoder><Serializer>XmlSerializer</Serializer><sspNullable>True</sspNullable><sspString>True</sspString><sspCollection>True</sspCollection><sspComplexType>True</sspComplexType><sspSimpleType>True</sspSimpleType><sspEnumType>True</sspEnumType><XmlSerializerEvent>False</XmlSerializerEvent><BaseClassName>EntityBase</BaseClassName><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><CustomUsings></CustomUsings><AttributesToExlude></AttributesToExlude>
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace Dangl.BCF.BCFv3.Schemas
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.ComponentModel.DataAnnotations;
    using System.Xml;
    using System.Collections.Generic;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "4.4.0.7")]
    [XmlTypeAttribute(AnonymousType=true)]
    [XmlRootAttribute(Namespace="", IsNullable=false)]
    public partial class Extensions
    {
        #region Private fields
        private List<string> _topicTypes;
        private List<string> _topicStatuses;
        private List<string> _priorities;
        private List<string> _topicLabels;
        private List<string> _users;
        private List<string> _snippetTypes;
        private List<string> _stages;
        private static XmlSerializer serializer;
        #endregion
        
        [XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [XmlArrayItemAttribute("TopicType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public List<string> TopicTypes
        {
            get
            {
                if ((_topicTypes == null))
                {
                    _topicTypes = new List<string>();
                }
                return _topicTypes;
            }
            set
            {
                _topicTypes = value;
            }
        }
        
        [XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [XmlArrayItemAttribute("TopicStatus", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public List<string> TopicStatuses
        {
            get
            {
                if ((_topicStatuses == null))
                {
                    _topicStatuses = new List<string>();
                }
                return _topicStatuses;
            }
            set
            {
                _topicStatuses = value;
            }
        }
        
        [XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [XmlArrayItemAttribute("Priority", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public List<string> Priorities
        {
            get
            {
                if ((_priorities == null))
                {
                    _priorities = new List<string>();
                }
                return _priorities;
            }
            set
            {
                _priorities = value;
            }
        }
        
        [XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [XmlArrayItemAttribute("TopicLabel", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public List<string> TopicLabels
        {
            get
            {
                if ((_topicLabels == null))
                {
                    _topicLabels = new List<string>();
                }
                return _topicLabels;
            }
            set
            {
                _topicLabels = value;
            }
        }
        
        [XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [XmlArrayItemAttribute("User", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public List<string> Users
        {
            get
            {
                if ((_users == null))
                {
                    _users = new List<string>();
                }
                return _users;
            }
            set
            {
                _users = value;
            }
        }
        
        [XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [XmlArrayItemAttribute("SnippetType", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public List<string> SnippetTypes
        {
            get
            {
                if ((_snippetTypes == null))
                {
                    _snippetTypes = new List<string>();
                }
                return _snippetTypes;
            }
            set
            {
                _snippetTypes = value;
            }
        }
        
        [XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [XmlArrayItemAttribute("Stage", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public List<string> Stages
        {
            get
            {
                if ((_stages == null))
                {
                    _stages = new List<string>();
                }
                return _stages;
            }
            set
            {
                _stages = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(Extensions));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether TopicTypes should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTopicTypes()
        {
            return TopicTypes != null && TopicTypes.Count > 0;
        }
        
        /// <summary>
        /// Test whether TopicStatuses should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTopicStatuses()
        {
            return TopicStatuses != null && TopicStatuses.Count > 0;
        }
        
        /// <summary>
        /// Test whether Priorities should be serialized
        /// </summary>
        public virtual bool ShouldSerializePriorities()
        {
            return Priorities != null && Priorities.Count > 0;
        }
        
        /// <summary>
        /// Test whether TopicLabels should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTopicLabels()
        {
            return TopicLabels != null && TopicLabels.Count > 0;
        }
        
        /// <summary>
        /// Test whether Users should be serialized
        /// </summary>
        public virtual bool ShouldSerializeUsers()
        {
            return Users != null && Users.Count > 0;
        }
        
        /// <summary>
        /// Test whether SnippetTypes should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSnippetTypes()
        {
            return SnippetTypes != null && SnippetTypes.Count > 0;
        }
        
        /// <summary>
        /// Test whether Stages should be serialized
        /// </summary>
        public virtual bool ShouldSerializeStages()
        {
            return Stages != null && Stages.Count > 0;
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Extensions object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Extensions object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Extensions object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Extensions obj, out Exception exception)
        {
            exception = null;
            obj = default(Extensions);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Extensions obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Extensions Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Extensions)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Extensions Deserialize(Stream s)
        {
            return ((Extensions)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Extensions object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Extensions object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Extensions object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Extensions obj, out Exception exception)
        {
            exception = null;
            obj = default(Extensions);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Extensions obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Extensions LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
}
#pragma warning restore
