// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.0.0.433
//    <NameSpace>Dangl.BCF_REST_API.BCFv2.Schemas</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><DataMemberNameArg>OnlyIfDifferent</DataMemberNameArg><DataMemberOnXmlIgnore>False</DataMemberOnXmlIgnore><CodeBaseTag>Net45</CodeBaseTag><InitializeFields>All</InitializeFields><GenerateUnusedComplexTypes>False</GenerateUnusedComplexTypes><GenerateUnusedSimpleTypes>False</GenerateUnusedSimpleTypes><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableLazyLoading>True</EnableLazyLoading><VirtualProp>False</VirtualProp><PascalCase>False</PascalCase><AutomaticProperties>False</AutomaticProperties><PropNameSpecified>Default</PropNameSpecified><PrivateFieldName>StartWithUnderscore</PrivateFieldName><PrivateFieldNamePrefix></PrivateFieldNamePrefix><EnableRestriction>True</EnableRestriction><RestrictionMaxLenght>True</RestrictionMaxLenght><RestrictionRegEx>True</RestrictionRegEx><RestrictionRange>True</RestrictionRange><ValidateProperty>False</ValidateProperty><ClassNamePrefix></ClassNamePrefix><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><EnableAppInfoSettings>False</EnableAppInfoSettings><EnableExternalSchemasCache>False</EnableExternalSchemasCache><EnableDebug>True</EnableDebug><EnableWarn>False</EnableWarn><ExcludeImportedTypes>False</ExcludeImportedTypes><ExpandNesteadAttributeGroup>False</ExpandNesteadAttributeGroup><CleanupCode>False</CleanupCode><EnableXmlSerialization>True</EnableXmlSerialization><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><EnableEncoding>False</EnableEncoding><EnableXMLIndent>True</EnableXMLIndent><Encoder>UTF8</Encoder><Serializer>XmlSerializer</Serializer><sspNullable>True</sspNullable><sspString>True</sspString><sspCollection>True</sspCollection><sspComplexType>True</sspComplexType><sspSimpleType>True</sspSimpleType><BaseClassName>EntityBase</BaseClassName><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><CustomUsings></CustomUsings><AttributesToExlude></AttributesToExlude>
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace Dangl.BCF.BCFv2.Schemas
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.ComponentModel.DataAnnotations;
    using System.Xml;
    using System.Collections.Generic;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public partial class Markup
    {
        
        private List<HeaderFile> _header;
        
        private Topic _topic;
        
        private List<Comment> _comment;
        
        private List<ViewPoint> _viewpoints;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("File", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public List<HeaderFile> Header
        {
            get
            {
                if ((this._header == null))
                {
                    this._header = new List<HeaderFile>();
                }
                return this._header;
            }
            set
            {
                this._header = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Topic Topic
        {
            get
            {
                if ((this._topic == null))
                {
                    this._topic = new Topic();
                }
                return this._topic;
            }
            set
            {
                this._topic = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Comment", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public List<Comment> Comment
        {
            get
            {
                if ((this._comment == null))
                {
                    this._comment = new List<Comment>();
                }
                return this._comment;
            }
            set
            {
                this._comment = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Viewpoints", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public List<ViewPoint> Viewpoints
        {
            get
            {
                if ((this._viewpoints == null))
                {
                    this._viewpoints = new List<ViewPoint>();
                }
                return this._viewpoints;
            }
            set
            {
                this._viewpoints = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(Markup));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether Header should be serialized
        /// </summary>
        public virtual bool ShouldSerializeHeader()
        {
            return Header != null && Header.Count > 0;
        }
        
        /// <summary>
        /// Test whether Comment should be serialized
        /// </summary>
        public virtual bool ShouldSerializeComment()
        {
            return Comment != null && Comment.Count > 0;
        }
        
        /// <summary>
        /// Test whether Viewpoints should be serialized
        /// </summary>
        public virtual bool ShouldSerializeViewpoints()
        {
            return Viewpoints != null && Viewpoints.Count > 0;
        }
        
        /// <summary>
        /// Test whether Topic should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTopic()
        {
            return (_topic != null);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Markup object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Markup object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Markup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Markup obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Markup);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Markup obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Markup Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((Markup)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Markup Deserialize(System.IO.Stream s)
        {
            return ((Markup)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Markup object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Dispose();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Markup object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Markup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Markup obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Markup);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Markup obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Markup LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Dispose();
                file.Dispose();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class HeaderFile
    {
        
        private bool _shouldSerializeisExternal;
        
        private bool _shouldSerializeDate;
        
        private string _filename;
        
        private System.Nullable<System.DateTime> _date;
        
        private string _reference;
        
        private string _ifcProject;
        
        private string _ifcSpatialStructureElement;
        
        private bool _isExternal;
        
        private static XmlSerializer serializer;
        
        /// <summary>
        /// HeaderFile class constructor
        /// </summary>
        public HeaderFile()
        {
            this._isExternal = true;
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Filename
        {
            get
            {
                return this._filename;
            }
            set
            {
                this._filename = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime Date
        {
            get
            {
                if (this._date.HasValue)
                {
                    return this._date.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                this._date = value;
                _shouldSerializeDate = true;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DateSpecified
        {
            get
            {
                return this._date.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._date = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Reference
        {
            get
            {
                return this._reference;
            }
            set
            {
                this._reference = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9,A-Z,a-z,_$]*")]
        public string IfcProject
        {
            get
            {
                return this._ifcProject;
            }
            set
            {
                this._ifcProject = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9,A-Z,a-z,_$]*")]
        public string IfcSpatialStructureElement
        {
            get
            {
                return this._ifcSpatialStructureElement;
            }
            set
            {
                this._ifcSpatialStructureElement = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool isExternal
        {
            get
            {
                return this._isExternal;
            }
            set
            {
                this._isExternal = value;
                _shouldSerializeisExternal = true;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(HeaderFile));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether Date should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDate()
        {
            if (_shouldSerializeDate)
            {
                return true;
            }
            return (_date != default(System.DateTime));
        }
        
        /// <summary>
        /// Test whether isExternal should be serialized
        /// </summary>
        public virtual bool ShouldSerializeisExternal()
        {
            if (_shouldSerializeisExternal)
            {
                return true;
            }
            return (_isExternal != default(bool));
        }
        
        /// <summary>
        /// Test whether Filename should be serialized
        /// </summary>
        public virtual bool ShouldSerializeFilename()
        {
            return !string.IsNullOrEmpty(Filename);
        }
        
        /// <summary>
        /// Test whether Reference should be serialized
        /// </summary>
        public virtual bool ShouldSerializeReference()
        {
            return !string.IsNullOrEmpty(Reference);
        }
        
        /// <summary>
        /// Test whether IfcProject should be serialized
        /// </summary>
        public virtual bool ShouldSerializeIfcProject()
        {
            return !string.IsNullOrEmpty(IfcProject);
        }
        
        /// <summary>
        /// Test whether IfcSpatialStructureElement should be serialized
        /// </summary>
        public virtual bool ShouldSerializeIfcSpatialStructureElement()
        {
            return !string.IsNullOrEmpty(IfcSpatialStructureElement);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current HeaderFile object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an HeaderFile object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output HeaderFile object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out HeaderFile obj, out System.Exception exception)
        {
            exception = null;
            obj = default(HeaderFile);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out HeaderFile obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static HeaderFile Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((HeaderFile)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static HeaderFile Deserialize(System.IO.Stream s)
        {
            return ((HeaderFile)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current HeaderFile object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Dispose();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an HeaderFile object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output HeaderFile object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out HeaderFile obj, out System.Exception exception)
        {
            exception = null;
            obj = default(HeaderFile);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out HeaderFile obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static HeaderFile LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Dispose();
                file.Dispose();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    public partial class ViewPoint
    {
        
        private string _viewpoint;
        
        private string _snapshot;
        
        private string _guid;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Viewpoint
        {
            get
            {
                return this._viewpoint;
            }
            set
            {
                this._viewpoint = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Snapshot
        {
            get
            {
                return this._snapshot;
            }
            set
            {
                this._snapshot = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        public string Guid
        {
            get
            {
                return this._guid;
            }
            set
            {
                this._guid = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(ViewPoint));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether Viewpoint should be serialized
        /// </summary>
        public virtual bool ShouldSerializeViewpoint()
        {
            return !string.IsNullOrEmpty(Viewpoint);
        }
        
        /// <summary>
        /// Test whether Snapshot should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSnapshot()
        {
            return !string.IsNullOrEmpty(Snapshot);
        }
        
        /// <summary>
        /// Test whether Guid should be serialized
        /// </summary>
        public virtual bool ShouldSerializeGuid()
        {
            return !string.IsNullOrEmpty(Guid);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ViewPoint object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ViewPoint object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ViewPoint object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ViewPoint obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ViewPoint);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out ViewPoint obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static ViewPoint Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ViewPoint)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static ViewPoint Deserialize(System.IO.Stream s)
        {
            return ((ViewPoint)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current ViewPoint object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Dispose();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ViewPoint object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ViewPoint object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ViewPoint obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ViewPoint);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ViewPoint obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ViewPoint LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Dispose();
                file.Dispose();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    public partial class Comment
    {
        
        private bool _shouldSerializeModifiedDate;
        
        private bool _shouldSerializeDate;
        
        private string _verbalStatus;
        
        private string _status;
        
        private System.DateTime _date;
        
        private string _author;
        
        private string _comment1;
        
        private CommentViewpoint _viewpoint;
        
        private CommentReplyToComment _replyToComment;
        
        private System.Nullable<System.DateTime> _modifiedDate;
        
        private string _modifiedAuthor;
        
        private string _guid;
        
        private static XmlSerializer serializer;
        
        /// <summary>
        /// Comment class constructor
        /// </summary>
        public Comment()
        {
            this._status = "Unknown";
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string VerbalStatus
        {
            get
            {
                return this._verbalStatus;
            }
            set
            {
                this._verbalStatus = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Status
        {
            get
            {
                return this._status;
            }
            set
            {
                this._status = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime Date
        {
            get
            {
                return this._date;
            }
            set
            {
                this._date = value;
                _shouldSerializeDate = true;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Author
        {
            get
            {
                return this._author;
            }
            set
            {
                this._author = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Comment", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Comment1
        {
            get
            {
                return this._comment1;
            }
            set
            {
                this._comment1 = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public CommentViewpoint Viewpoint
        {
            get
            {
                if ((this._viewpoint == null))
                {
                    this._viewpoint = new CommentViewpoint();
                }
                return this._viewpoint;
            }
            set
            {
                this._viewpoint = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public CommentReplyToComment ReplyToComment
        {
            get
            {
                if ((this._replyToComment == null))
                {
                    this._replyToComment = new CommentReplyToComment();
                }
                return this._replyToComment;
            }
            set
            {
                this._replyToComment = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime ModifiedDate
        {
            get
            {
                if (this._modifiedDate.HasValue)
                {
                    return this._modifiedDate.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                this._modifiedDate = value;
                _shouldSerializeModifiedDate = true;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModifiedDateSpecified
        {
            get
            {
                return this._modifiedDate.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._modifiedDate = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ModifiedAuthor
        {
            get
            {
                return this._modifiedAuthor;
            }
            set
            {
                this._modifiedAuthor = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        public string Guid
        {
            get
            {
                return this._guid;
            }
            set
            {
                this._guid = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(Comment));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether Date should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDate()
        {
            if (_shouldSerializeDate)
            {
                return true;
            }
            return (_date != default(System.DateTime));
        }
        
        /// <summary>
        /// Test whether ModifiedDate should be serialized
        /// </summary>
        public virtual bool ShouldSerializeModifiedDate()
        {
            if (_shouldSerializeModifiedDate)
            {
                return true;
            }
            return (_modifiedDate != default(System.DateTime));
        }
        
        /// <summary>
        /// Test whether Viewpoint should be serialized
        /// </summary>
        public virtual bool ShouldSerializeViewpoint()
        {
            return (_viewpoint != null);
        }
        
        /// <summary>
        /// Test whether ReplyToComment should be serialized
        /// </summary>
        public virtual bool ShouldSerializeReplyToComment()
        {
            return (_replyToComment != null);
        }
        
        /// <summary>
        /// Test whether VerbalStatus should be serialized
        /// </summary>
        public virtual bool ShouldSerializeVerbalStatus()
        {
            return !string.IsNullOrEmpty(VerbalStatus);
        }
        
        /// <summary>
        /// Test whether Status should be serialized
        /// </summary>
        public virtual bool ShouldSerializeStatus()
        {
            return !string.IsNullOrEmpty(Status);
        }
        
        /// <summary>
        /// Test whether Author should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAuthor()
        {
            return !string.IsNullOrEmpty(Author);
        }
        
        /// <summary>
        /// Test whether Comment1 should be serialized
        /// </summary>
        public virtual bool ShouldSerializeComment1()
        {
            return !string.IsNullOrEmpty(Comment1);
        }
        
        /// <summary>
        /// Test whether ModifiedAuthor should be serialized
        /// </summary>
        public virtual bool ShouldSerializeModifiedAuthor()
        {
            return !string.IsNullOrEmpty(ModifiedAuthor);
        }
        
        /// <summary>
        /// Test whether Guid should be serialized
        /// </summary>
        public virtual bool ShouldSerializeGuid()
        {
            return !string.IsNullOrEmpty(Guid);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Comment object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Comment object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Comment object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Comment obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Comment);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Comment obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Comment Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((Comment)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Comment Deserialize(System.IO.Stream s)
        {
            return ((Comment)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Comment object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Dispose();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Comment object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Comment object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Comment obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Comment);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Comment obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Comment LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Dispose();
                file.Dispose();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class CommentViewpoint
    {
        
        private string _guid;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        public string Guid
        {
            get
            {
                return this._guid;
            }
            set
            {
                this._guid = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(CommentViewpoint));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether Guid should be serialized
        /// </summary>
        public virtual bool ShouldSerializeGuid()
        {
            return !string.IsNullOrEmpty(Guid);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CommentViewpoint object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an CommentViewpoint object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output CommentViewpoint object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out CommentViewpoint obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CommentViewpoint);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out CommentViewpoint obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static CommentViewpoint Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((CommentViewpoint)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static CommentViewpoint Deserialize(System.IO.Stream s)
        {
            return ((CommentViewpoint)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current CommentViewpoint object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Dispose();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an CommentViewpoint object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CommentViewpoint object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out CommentViewpoint obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CommentViewpoint);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out CommentViewpoint obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static CommentViewpoint LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Dispose();
                file.Dispose();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class CommentReplyToComment
    {
        
        private string _guid;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        public string Guid
        {
            get
            {
                return this._guid;
            }
            set
            {
                this._guid = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(CommentReplyToComment));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether Guid should be serialized
        /// </summary>
        public virtual bool ShouldSerializeGuid()
        {
            return !string.IsNullOrEmpty(Guid);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CommentReplyToComment object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an CommentReplyToComment object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output CommentReplyToComment object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out CommentReplyToComment obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CommentReplyToComment);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out CommentReplyToComment obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static CommentReplyToComment Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((CommentReplyToComment)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static CommentReplyToComment Deserialize(System.IO.Stream s)
        {
            return ((CommentReplyToComment)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current CommentReplyToComment object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Dispose();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an CommentReplyToComment object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CommentReplyToComment object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out CommentReplyToComment obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CommentReplyToComment);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out CommentReplyToComment obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static CommentReplyToComment LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Dispose();
                file.Dispose();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    public partial class BimSnippet
    {
        
        private bool _shouldSerializeisExternal;
        
        private string _reference;
        
        private string _referenceSchema;
        
        private string _snippetType;
        
        private bool _isExternal;
        
        private static XmlSerializer serializer;
        
        /// <summary>
        /// BimSnippet class constructor
        /// </summary>
        public BimSnippet()
        {
            this._isExternal = false;
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Reference
        {
            get
            {
                return this._reference;
            }
            set
            {
                this._reference = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ReferenceSchema
        {
            get
            {
                return this._referenceSchema;
            }
            set
            {
                this._referenceSchema = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string SnippetType
        {
            get
            {
                return this._snippetType;
            }
            set
            {
                this._snippetType = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool isExternal
        {
            get
            {
                return this._isExternal;
            }
            set
            {
                this._isExternal = value;
                _shouldSerializeisExternal = true;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(BimSnippet));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether isExternal should be serialized
        /// </summary>
        public virtual bool ShouldSerializeisExternal()
        {
            if (_shouldSerializeisExternal)
            {
                return true;
            }
            return (_isExternal != default(bool));
        }
        
        /// <summary>
        /// Test whether Reference should be serialized
        /// </summary>
        public virtual bool ShouldSerializeReference()
        {
            return !string.IsNullOrEmpty(Reference);
        }
        
        /// <summary>
        /// Test whether ReferenceSchema should be serialized
        /// </summary>
        public virtual bool ShouldSerializeReferenceSchema()
        {
            return !string.IsNullOrEmpty(ReferenceSchema);
        }
        
        /// <summary>
        /// Test whether SnippetType should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSnippetType()
        {
            return !string.IsNullOrEmpty(SnippetType);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current BimSnippet object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an BimSnippet object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output BimSnippet object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out BimSnippet obj, out System.Exception exception)
        {
            exception = null;
            obj = default(BimSnippet);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out BimSnippet obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static BimSnippet Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((BimSnippet)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static BimSnippet Deserialize(System.IO.Stream s)
        {
            return ((BimSnippet)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current BimSnippet object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Dispose();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an BimSnippet object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output BimSnippet object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out BimSnippet obj, out System.Exception exception)
        {
            exception = null;
            obj = default(BimSnippet);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out BimSnippet obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static BimSnippet LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Dispose();
                file.Dispose();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    public partial class Topic
    {
        
        private bool _shouldSerializeModifiedDate;
        
        private bool _shouldSerializeCreationDate;
        
        private string _referenceLink;
        
        private string _title;
        
        private string _priority;
        
        private string _index;
        
        private List<string> _labels;
        
        private System.Nullable<System.DateTime> _creationDate;
        
        private string _creationAuthor;
        
        private System.Nullable<System.DateTime> _modifiedDate;
        
        private string _modifiedAuthor;
        
        private string _assignedTo;
        
        private string _description;
        
        private BimSnippet _bimSnippet;
        
        private List<TopicDocumentReferences> _documentReferences;
        
        private List<TopicRelatedTopics> _relatedTopics;
        
        private string _guid;
        
        private string _topicType;
        
        private string _topicStatus;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ReferenceLink
        {
            get
            {
                return this._referenceLink;
            }
            set
            {
                this._referenceLink = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Title
        {
            get
            {
                return this._title;
            }
            set
            {
                this._title = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Priority
        {
            get
            {
                return this._priority;
            }
            set
            {
                this._priority = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="integer")]
        public string Index
        {
            get
            {
                return this._index;
            }
            set
            {
                this._index = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Labels", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public List<string> Labels
        {
            get
            {
                if ((this._labels == null))
                {
                    this._labels = new List<string>();
                }
                return this._labels;
            }
            set
            {
                this._labels = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime CreationDate
        {
            get
            {
                if (this._creationDate.HasValue)
                {
                    return this._creationDate.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                this._creationDate = value;
                _shouldSerializeCreationDate = true;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreationDateSpecified
        {
            get
            {
                return this._creationDate.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._creationDate = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string CreationAuthor
        {
            get
            {
                return this._creationAuthor;
            }
            set
            {
                this._creationAuthor = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime ModifiedDate
        {
            get
            {
                if (this._modifiedDate.HasValue)
                {
                    return this._modifiedDate.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                this._modifiedDate = value;
                _shouldSerializeModifiedDate = true;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModifiedDateSpecified
        {
            get
            {
                return this._modifiedDate.HasValue;
            }
            set
            {
                if (value==false)
                {
                    this._modifiedDate = null;
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ModifiedAuthor
        {
            get
            {
                return this._modifiedAuthor;
            }
            set
            {
                this._modifiedAuthor = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string AssignedTo
        {
            get
            {
                return this._assignedTo;
            }
            set
            {
                this._assignedTo = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public BimSnippet BimSnippet
        {
            get
            {
                if ((this._bimSnippet == null))
                {
                    this._bimSnippet = new BimSnippet();
                }
                return this._bimSnippet;
            }
            set
            {
                this._bimSnippet = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("DocumentReferences", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public List<TopicDocumentReferences> DocumentReferences
        {
            get
            {
                if ((this._documentReferences == null))
                {
                    this._documentReferences = new List<TopicDocumentReferences>();
                }
                return this._documentReferences;
            }
            set
            {
                this._documentReferences = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("RelatedTopics", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public List<TopicRelatedTopics> RelatedTopics
        {
            get
            {
                if ((this._relatedTopics == null))
                {
                    this._relatedTopics = new List<TopicRelatedTopics>();
                }
                return this._relatedTopics;
            }
            set
            {
                this._relatedTopics = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        public string Guid
        {
            get
            {
                return this._guid;
            }
            set
            {
                this._guid = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string TopicType
        {
            get
            {
                return this._topicType;
            }
            set
            {
                this._topicType = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string TopicStatus
        {
            get
            {
                return this._topicStatus;
            }
            set
            {
                this._topicStatus = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(Topic));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether Labels should be serialized
        /// </summary>
        public virtual bool ShouldSerializeLabels()
        {
            return Labels != null && Labels.Count > 0;
        }
        
        /// <summary>
        /// Test whether DocumentReferences should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDocumentReferences()
        {
            return DocumentReferences != null && DocumentReferences.Count > 0;
        }
        
        /// <summary>
        /// Test whether RelatedTopics should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRelatedTopics()
        {
            return RelatedTopics != null && RelatedTopics.Count > 0;
        }
        
        /// <summary>
        /// Test whether CreationDate should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCreationDate()
        {
            if (_shouldSerializeCreationDate)
            {
                return true;
            }
            return (_creationDate != default(System.DateTime));
        }
        
        /// <summary>
        /// Test whether ModifiedDate should be serialized
        /// </summary>
        public virtual bool ShouldSerializeModifiedDate()
        {
            if (_shouldSerializeModifiedDate)
            {
                return true;
            }
            return (_modifiedDate != default(System.DateTime));
        }
        
        /// <summary>
        /// Test whether BimSnippet should be serialized
        /// </summary>
        public virtual bool ShouldSerializeBimSnippet()
        {
            return (_bimSnippet != null);
        }
        
        /// <summary>
        /// Test whether ReferenceLink should be serialized
        /// </summary>
        public virtual bool ShouldSerializeReferenceLink()
        {
            return !string.IsNullOrEmpty(ReferenceLink);
        }
        
        /// <summary>
        /// Test whether Title should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTitle()
        {
            return !string.IsNullOrEmpty(Title);
        }
        
        /// <summary>
        /// Test whether Priority should be serialized
        /// </summary>
        public virtual bool ShouldSerializePriority()
        {
            return !string.IsNullOrEmpty(Priority);
        }
        
        /// <summary>
        /// Test whether Index should be serialized
        /// </summary>
        public virtual bool ShouldSerializeIndex()
        {
            return !string.IsNullOrEmpty(Index);
        }
        
        /// <summary>
        /// Test whether CreationAuthor should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCreationAuthor()
        {
            return !string.IsNullOrEmpty(CreationAuthor);
        }
        
        /// <summary>
        /// Test whether ModifiedAuthor should be serialized
        /// </summary>
        public virtual bool ShouldSerializeModifiedAuthor()
        {
            return !string.IsNullOrEmpty(ModifiedAuthor);
        }
        
        /// <summary>
        /// Test whether AssignedTo should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAssignedTo()
        {
            return !string.IsNullOrEmpty(AssignedTo);
        }
        
        /// <summary>
        /// Test whether Description should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDescription()
        {
            return !string.IsNullOrEmpty(Description);
        }
        
        /// <summary>
        /// Test whether Guid should be serialized
        /// </summary>
        public virtual bool ShouldSerializeGuid()
        {
            return !string.IsNullOrEmpty(Guid);
        }
        
        /// <summary>
        /// Test whether TopicType should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTopicType()
        {
            return !string.IsNullOrEmpty(TopicType);
        }
        
        /// <summary>
        /// Test whether TopicStatus should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTopicStatus()
        {
            return !string.IsNullOrEmpty(TopicStatus);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Topic object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Topic object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Topic object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Topic obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Topic);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Topic obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Topic Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((Topic)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Topic Deserialize(System.IO.Stream s)
        {
            return ((Topic)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Topic object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Dispose();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Topic object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Topic object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Topic obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Topic);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Topic obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Topic LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Dispose();
                file.Dispose();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class TopicDocumentReferences
    {
        
        private bool _shouldSerializeisExternal;
        
        private string _referencedDocument;
        
        private string _description;
        
        private string _guid;
        
        private bool _isExternal;
        
        private static XmlSerializer serializer;
        
        /// <summary>
        /// TopicDocumentReferences class constructor
        /// </summary>
        public TopicDocumentReferences()
        {
            this._isExternal = false;
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ReferencedDocument
        {
            get
            {
                return this._referencedDocument;
            }
            set
            {
                this._referencedDocument = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        public string Guid
        {
            get
            {
                return this._guid;
            }
            set
            {
                this._guid = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool isExternal
        {
            get
            {
                return this._isExternal;
            }
            set
            {
                this._isExternal = value;
                _shouldSerializeisExternal = true;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(TopicDocumentReferences));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether isExternal should be serialized
        /// </summary>
        public virtual bool ShouldSerializeisExternal()
        {
            if (_shouldSerializeisExternal)
            {
                return true;
            }
            return (_isExternal != default(bool));
        }
        
        /// <summary>
        /// Test whether ReferencedDocument should be serialized
        /// </summary>
        public virtual bool ShouldSerializeReferencedDocument()
        {
            return !string.IsNullOrEmpty(ReferencedDocument);
        }
        
        /// <summary>
        /// Test whether Description should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDescription()
        {
            return !string.IsNullOrEmpty(Description);
        }
        
        /// <summary>
        /// Test whether Guid should be serialized
        /// </summary>
        public virtual bool ShouldSerializeGuid()
        {
            return !string.IsNullOrEmpty(Guid);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TopicDocumentReferences object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TopicDocumentReferences object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TopicDocumentReferences object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TopicDocumentReferences obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TopicDocumentReferences);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TopicDocumentReferences obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TopicDocumentReferences Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TopicDocumentReferences)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TopicDocumentReferences Deserialize(System.IO.Stream s)
        {
            return ((TopicDocumentReferences)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TopicDocumentReferences object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Dispose();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TopicDocumentReferences object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TopicDocumentReferences object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TopicDocumentReferences obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TopicDocumentReferences);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TopicDocumentReferences obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TopicDocumentReferences LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Dispose();
                file.Dispose();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class TopicRelatedTopics
    {
        
        private string _guid;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        public string Guid
        {
            get
            {
                return this._guid;
            }
            set
            {
                this._guid = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializer(typeof(TopicRelatedTopics));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether Guid should be serialized
        /// </summary>
        public virtual bool ShouldSerializeGuid()
        {
            return !string.IsNullOrEmpty(Guid);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TopicRelatedTopics object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TopicRelatedTopics object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TopicRelatedTopics object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TopicRelatedTopics obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TopicRelatedTopics);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out TopicRelatedTopics obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static TopicRelatedTopics Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TopicRelatedTopics)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static TopicRelatedTopics Deserialize(System.IO.Stream s)
        {
            return ((TopicRelatedTopics)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current TopicRelatedTopics object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Dispose();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TopicRelatedTopics object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TopicRelatedTopics object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TopicRelatedTopics obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TopicRelatedTopics);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TopicRelatedTopics obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TopicRelatedTopics LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Dispose();
                file.Dispose();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
}
#pragma warning restore
