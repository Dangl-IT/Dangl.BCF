//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.34209
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace iabi.BCF.Test.BCFTestCases.Import {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class BCFTestCasesImportData {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal BCFTestCasesImportData() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("iabi.BCF.Test.BCFTestCases.Import.BCFTestCasesImportData", typeof(BCFTestCasesImportData).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Byte[].
        /// </summary>
        internal static byte[] Bitmap {
            get {
                object obj = ResourceManager.GetObject("Bitmap", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die # Bitmap
        ///
        ///This test case verifies support for bitmaps in the viewpoint
        ///
        ///## Testing process
        ///
        ///1. Load _Architectural.ifc_ from the test cases root directory
        ///2. Import _Bitmap.bcfzip_
        ///3. Verify the bcfzip was imported correctly:
        ///
        ///&gt; Verification paragrpah 1
        ///&gt; 1. Bcfzip file has one issue with one viewpoint
        ///&gt; 2. The viewpoint has one bitmap, text &quot;Bitmap&quot; as image
        ///
        ///&gt; Verification paragrpah 2 
        ///
        ///4. Export the topic(s) you imported to _exported.ifc_
        ///5. Verify that no information was lost during the export
        ///
        ///## (Opti [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Bitmap_Readme {
            get {
                return ResourceManager.GetString("Bitmap_Readme", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Byte[].
        /// </summary>
        internal static byte[] Clippingplane {
            get {
                object obj = ResourceManager.GetObject("Clippingplane", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die # Clipping Plane
        ///
        ///This test case verifies support for clipping plane in the viewpoint
        ///
        ///## Testing process
        ///
        ///1. Load _Architectural.ifc_ from the test cases root directory
        ///2. Import _Clippingplane.bcfzip_
        ///3. Verify the bcfzip was imported correctly:
        ///
        ///&gt; Verification paragrpah 1
        ///&gt; 1. Bcfzip file has one issue with one viewpoint
        ///&gt; 2. The viewpoint has one clipping plane that is cutting the model horizontally
        ///
        ///&gt; Verification paragrpah 2 
        ///
        ///4. Export the topic(s) you imported to _exported.ifc_
        ///5. Verify that no inf [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Clippingplane_Readme {
            get {
                return ResourceManager.GetString("Clippingplane_Readme", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Byte[].
        /// </summary>
        internal static byte[] comments_without_viewpoints {
            get {
                object obj = ResourceManager.GetObject("comments_without_viewpoints", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Byte[].
        /// </summary>
        internal static byte[] comments_without_viewpoints_Readme {
            get {
                object obj = ResourceManager.GetObject("comments_without_viewpoints_Readme", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Byte[].
        /// </summary>
        internal static byte[] component_coloring {
            get {
                object obj = ResourceManager.GetObject("component_coloring", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die # component coloring
        ///
        ///This test case verifies support for coloring of components
        ///
        ///## Testing process
        ///
        ///1. Load _Architectural.ifc_ from the test cases root directory
        ///2. Import _component coloring.bcfzip_
        ///3. Verify the bcfzip was imported correctly:
        ///
        ///&gt; Verification paragrpah 1
        ///&gt; 1. Bcfzip file has one issue with one viewpoint
        ///&gt; 2. One wall colored green and added to the viewpoint
        ///
        ///&gt; Verification paragrpah 2 
        ///
        ///4. Export the topic(s) you imported to _exported.ifc_
        ///5. Verify that no information was lost during t [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string component_coloring_Readme {
            get {
                return ResourceManager.GetString("component_coloring_Readme", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Byte[].
        /// </summary>
        internal static byte[] Decomposed_object_with_parent_guid {
            get {
                object obj = ResourceManager.GetObject("Decomposed_object_with_parent_guid", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die # Decomposed objects
        ///
        ///This test case verifies support for correct handling of decomposed objects, such as, curtain walls. In this test case only the parent component of a decomposed curtain wall is listed in the components part of the viewpoint.bcfv. 
        ///
        ///## Testing process
        ///
        ///1. Load _Architectural.ifc_ from the test cases root directory
        ///2. Import _Decomposed object with parent guid.bcfzip_
        ///3. Verify the bcfzip was imported correctly:
        ///
        ///&gt; 1. Topic with guid a23e8824-137a-4bea-a1ad-541f87d274e7 should have all pa [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Decomposed_object_with_parent_guid_Readme {
            get {
                return ResourceManager.GetString("Decomposed_object_with_parent_guid_Readme", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Byte[].
        /// </summary>
        internal static byte[] Decomposed_objects {
            get {
                object obj = ResourceManager.GetObject("Decomposed_objects", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die # Decomposed objects
        ///
        ///This test case verifies support for correct handling of decomposed objects, such as, curtain walls.
        ///
        ///## Testing process
        ///
        ///1. Load _Architectural.ifc_ from the test cases root directory
        ///2. Import _Decomposed objects.bcfzip_
        ///3. Verify the bcfzip was imported correctly:
        ///
        ///&gt; 1. Topic with guid 6da43897-f4ff-4694-97dc-fc4a43770749 should have all parts of decomposed wall (2_hQ1Rixj6lgHTra$L72O4) visible 
        ///&gt; 2. Topic with guid 24e5625c-8ff1-40f9-81f2-f31cfa48cf74 has all other parts of wall 2_h [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Decomposed_objects_Readme {
            get {
                return ResourceManager.GetString("Decomposed_objects_Readme", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Byte[].
        /// </summary>
        internal static byte[] default_component_visibility {
            get {
                object obj = ResourceManager.GetObject("default_component_visibility", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die # Default component visibility
        ///
        ///This test case verifies support for the default visibility rules of components based on the implementation agreement specified in the BCF 2.0 specification.  
        ///
        ///## Testing process
        ///
        ///1. Load _Architectural.ifc_ from the test cases root directory
        ///2. Import _default-component-visibility.bcfzip_
        ///3. Verify the bcfzip was imported correctly:
        ///
        ///&gt; 1. IfcWallStandardCase with GUID _1E8YkwPMfB$h99jtn_uAjI_ should be selected
        ///&gt; 2. IfcSpace with GUID _1m5wAJelDFdhn6qBdOGjos_ should not be v [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string default_component_visibility_Readme {
            get {
                return ResourceManager.GetString("default_component_visibility_Readme", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Byte[].
        /// </summary>
        internal static byte[] header_with_no_files {
            get {
                object obj = ResourceManager.GetObject("header_with_no_files", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die # Header with no files
        ///This test case verifies support for empty headers
        ///## Testing process
        ///1. Load _Architectural.ifc_ from the test cases root directory
        ///2. Import _header-with-no-files.bcfzip_
        ///3. Verify the bcfzip was imported correctly:
        ///
        ///&gt; 1. There should be a single viewpoint associated with a comment
        ///&gt; 2. When loading the viewpoint it should match the snapshot (see snapshot.png)  
        ///
        ///4. Export the topic(s) you imported to _exported.bcfzip_
        ///5. Verify that no information was lost during the export
        /// ähnelt.
        /// </summary>
        internal static string header_with_no_files_Readme {
            get {
                return ResourceManager.GetString("header_with_no_files_Readme", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Byte[].
        /// </summary>
        internal static byte[] header_with_single_file {
            get {
                object obj = ResourceManager.GetObject("header_with_single_file", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die # Header with a single file
        ///
        ///This test case verifies support for headers which associate the topic with a single model
        ///
        ///## Testing process
        ///
        ///1. Load _Architectural.ifc_ from the test cases root directory
        ///2. Import _single-file-in-header.bcfzip_
        ///3. Verify the bcfzip was imported correctly:
        ///
        ///&gt; 1. There should be a single viewpoint associated with a comment
        ///&gt; 2. When loading the viewpoint it should match the snapshot (see snapshot.png)  
        ///
        ///
        ///4. Export the topic(s) you imported to _exported.bcfzip_
        ///5. Verify that  [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string header_with_single_file_Readme {
            get {
                return ResourceManager.GetString("header_with_single_file_Readme", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Byte[].
        /// </summary>
        internal static byte[] Lines {
            get {
                object obj = ResourceManager.GetObject("Lines", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Byte[].
        /// </summary>
        internal static byte[] Lines_Readme {
            get {
                object obj = ResourceManager.GetObject("Lines_Readme", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Byte[].
        /// </summary>
        internal static byte[] multiple_files_in_header {
            get {
                object obj = ResourceManager.GetObject("multiple_files_in_header", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die # Header with a multiple file
        ///
        ///This test case verifies support for headers which associate the topic with a multiple models
        ///
        ///## Testing process
        ///
        ///1. Load _Architectural.ifc_ from the test cases root directory
        ///2. Load _MEP.ifc_ from the test cases root directory
        ///3. Import _multiple-files-in-header.bcfzip_
        ///4. Verify the bcfzip was imported correctly:
        ///
        ///&gt; 1. There should be a single viewpoint associated with a comment
        ///&gt; 2. When loading the viewpoint it should match the snapshot (see snapshot.png)  
        ///
        ///
        ///4. Export t [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string multiple_files_in_header_Readme {
            get {
                return ResourceManager.GetString("multiple_files_in_header_Readme", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Byte[].
        /// </summary>
        internal static byte[] multiple_topics_bcfzip {
            get {
                object obj = ResourceManager.GetObject("multiple_topics_bcfzip", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die # Multiple Topics
        ///
        ///This test case verifies support for multiple topics
        ///
        ///## Testing process
        ///
        ///1. Load _Architectural.ifc_ from the test cases root directory
        ///2. Import _multiple_topics.bcfzip_
        ///3. Verify the bcfzip was imported correctly:
        ///
        ///&gt; 1. Verify that three topics has been imported
        ///&gt; 2. Verify that each topic has a comment
        ///&gt; 3. Verify that each comment has a viewpoint with snapshot
        ///
        ///4. Export the topic(s) you imported to _exported.bcfzip_
        ///5. Verify that no information was lost during the exp [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string multiple_topics_Readme {
            get {
                return ResourceManager.GetString("multiple_topics_Readme", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Byte[].
        /// </summary>
        internal static byte[] multiple_viewpoints_without_comments {
            get {
                object obj = ResourceManager.GetObject("multiple_viewpoints_without_comments", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die # multiple viewpoints without comments
        ///
        ///This test case verifies support for multiple viewpoints without comments in the viewpoint
        ///
        ///## Testing process
        ///
        ///1. Load _Architectural.ifc_ from the test cases root directory
        ///2. Import _multiple_viewpoints_without_comments.bcfzip_
        ///3. Verify the bcfzip was imported correctly:
        ///
        ///&gt; Verification paragrpah 1
        ///&gt; 1. Bcfzip file has one issue with six viewpoint (Model from six sides)
        ///&gt; 2. The viewpoint no 3 is initially visible
        ///&gt; 3. There are no comments with any viewpoint
        ///
        ///&gt; Ve [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string multiple_viewpoints_without_comments_Readme {
            get {
                return ResourceManager.GetString("multiple_viewpoints_without_comments_Readme", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Byte[].
        /// </summary>
        internal static byte[] Perspective_view {
            get {
                object obj = ResourceManager.GetObject("Perspective_view", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Byte[].
        /// </summary>
        internal static byte[] RelatedTopicsWithBothTopicsInSameFile {
            get {
                object obj = ResourceManager.GetObject("RelatedTopicsWithBothTopicsInSameFile", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die # \&lt;Related topics with both topics in the same file\&gt;
        ///
        ///This test case verifies support for related topics
        ///
        ///## Testing process
        ///
        ///1. Import \case.bcfzip
        ///2. Verify the bcfzip was imported correctly:
        ///
        ///&gt; 1. Check that the topic has a related topic, and that is available
        ///
        ///&gt; 
        ///&gt; Verification paragrpah 2 
        ///
        ///4. Export the topic(s) you imported to exported.bcfzip
        ///5. Verify that no information was lost during the export
        ///
        ///
        /// ähnelt.
        /// </summary>
        internal static string RelatedTopicsWithBothTopicsInSameFile_readme {
            get {
                return ResourceManager.GetString("RelatedTopicsWithBothTopicsInSameFile_readme", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Byte[].
        /// </summary>
        internal static byte[] RelatedTopicsWithOtherTopicMissing {
            get {
                object obj = ResourceManager.GetObject("RelatedTopicsWithOtherTopicMissing", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die # \&lt;Related topics with the other topic missing\&gt;
        ///
        ///This test case verifies support for related topics
        ///
        ///## Testing process
        ///
        ///1. Import \case.bcfzip
        ///2. Verify the bcfzip was imported correctly:
        ///
        ///&gt; 1. Check that the topic has a related topic, even though it is not availbable
        ///
        ///&gt; 
        ///&gt; Verification paragrpah 2 
        ///
        ///4. Export the topic(s) you imported to exported.bcfzip
        ///5. Verify that no information was lost during the export
        ///
        ///
        /// ähnelt.
        /// </summary>
        internal static string RelatedTopicsWithOtherTopicMissing_readme {
            get {
                return ResourceManager.GetString("RelatedTopicsWithOtherTopicMissing_readme", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Byte[].
        /// </summary>
        internal static byte[] Selected_component {
            get {
                object obj = ResourceManager.GetObject("Selected_component", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Byte[].
        /// </summary>
        internal static byte[] single_visible_space {
            get {
                object obj = ResourceManager.GetObject("single_visible_space", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die # Single Visible Space
        ///
        ///This test case verifies support for 
        ///1. Displaying spaces 
        ///2. The implementation agreement where is an element is marked as visible then all other elements should be invisible
        ///3. The implementation agreement where spaces should be invisible unless otherwise specified
        ///
        ///## Testing process
        ///
        ///1. Load _Architectural.ifc_ from the test cases root directory
        ///2. Import _single-visible-space.bcfzip_
        ///3. Verify the bcfzip was imported correctly:
        ///
        ///&gt; 1. There should be a single viewpoint associated [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string single_visible_space_Readme {
            get {
                return ResourceManager.GetString("single_visible_space_Readme", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Byte[].
        /// </summary>
        internal static byte[] single_visible_wall {
            get {
                object obj = ResourceManager.GetObject("single_visible_wall", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die # Single Visible Wall
        ///
        ///This test case verifies support for component visibility settings
        ///
        ///## Testing process
        ///
        ///1. Load _Architectural.ifc_ from the test cases root directory
        ///2. Import _single_visible_wall.bcfzip_
        ///4. Verify the bcfzip was imported correctly:
        ///
        ///&gt; 1. Verify that single wall in _components_ is visible
        ///&gt; 2. Verify that nothing else is visible
        ///
        ///4. Export the topic(s) you imported to _exported.bcfzip_
        ///5. Verify that no information was lost during the export ähnelt.
        /// </summary>
        internal static string single_visible_wall_Readme {
            get {
                return ResourceManager.GetString("single_visible_wall_Readme", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Byte[].
        /// </summary>
        internal static byte[] SingleInvisibleWall {
            get {
                object obj = ResourceManager.GetObject("SingleInvisibleWall", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die # \&lt;Single invisible wall\&gt;
        ///
        ///This test case verifies support for component visibility
        ///
        ///## Testing process
        ///
        ///1. Load Architectural.ifc from the test cases root directory
        ///2. Import \case.bcfzip
        ///3. Verify the bcfzip was imported correctly:
        ///
        ///&gt; 1. Check that nothing is selected
        ///&gt; 2. Check that a wall is hided
        ///&gt; 3. Check that everything else is visible
        ///&gt; 
        ///&gt; Verification paragrpah 2 
        ///
        ///4. Export the topic(s) you imported to exported.bcfzip
        ///5. Verify that no information was lost during the export
        ///
        ///
        /// ähnelt.
        /// </summary>
        internal static string SingleInvisibleWall_readme {
            get {
                return ResourceManager.GetString("SingleInvisibleWall_readme", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Byte[].
        /// </summary>
        internal static byte[] user_assignment {
            get {
                object obj = ResourceManager.GetObject("user_assignment", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die # \&lt;Topic with assigned user\&gt;
        ///
        ///This test case verifies support for assigned user
        ///
        ///## Testing process
        ///
        ///1. Import \case.bcfzip
        ///2. Verify the bcfzip was imported correctly:
        ///
        ///&gt; 1. Check that the topic has an assigned user
        ///
        ///&gt; 
        ///&gt; Verification paragrpah 2 
        ///
        ///4. Export the topic(s) you imported to exported.bcfzip
        ///5. Verify that no information was lost during the export
        ///
        ///
        /// ähnelt.
        /// </summary>
        internal static string user_assignment_readme {
            get {
                return ResourceManager.GetString("user_assignment_readme", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Byte[].
        /// </summary>
        internal static byte[] Visible_Opening {
            get {
                object obj = ResourceManager.GetObject("Visible_Opening", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die # visible openings
        ///
        ///This test case verifies support for visible openings
        ///
        ///## Testing process
        ///
        ///1. Load _Architectural.ifc_ from the test cases root directory
        ///2. Import _Visible opening.bcfzip_
        ///3. Verify the bcfzip was imported correctly:
        ///
        ///&gt; Verification paragrpah 1
        ///&gt; 1. Bcfzip file has one issue with one viewpoint
        ///&gt; 2. One opening of model is colored green and added to the viewpoint
        ///
        ///&gt; Verification paragrpah 2 
        ///
        ///4. Export the topic(s) you imported to _exported.ifc_
        ///5. Verify that no information was lost duri [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Visible_Opening_Readme {
            get {
                return ResourceManager.GetString("Visible_Opening_Readme", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Byte[].
        /// </summary>
        internal static byte[] visible_space_and_the_rest_of_the_model_visible {
            get {
                object obj = ResourceManager.GetObject("visible_space_and_the_rest_of_the_model_visible", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die # visible spaces and components
        ///
        ///This test case verifies support for visible space and components
        ///
        ///## Testing process
        ///
        ///1. Load _Architectural.ifc_ from the test cases root directory
        ///2. Import _visible space and the rest of the model visible.bcfzip_
        ///3. Verify the bcfzip was imported correctly:
        ///
        ///&gt; Verification paragrpah 1
        ///&gt; 1. Bcfzip file has one issue
        ///&gt; 2. All components of model including two spaces and three openings are added to the viewpoint
        ///
        ///&gt; Verification paragrpah 2 
        ///
        ///4. Export the topic(s) you import [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string visible_space_and_the_rest_of_the_model_visible_Readme {
            get {
                return ResourceManager.GetString("visible_space_and_the_rest_of_the_model_visible_Readme", resourceCulture);
            }
        }
    }
}
