using System;
using System.Linq;
using System.Threading.Tasks;
using Nuke.Common;
using Nuke.Common.Git;
using Nuke.Common.IO;
using Nuke.Common.ProjectModel;
using Nuke.Common.Tooling;
using Nuke.Common.Tools.DotNet;
using Nuke.Common.Tools.GitVersion;
using Nuke.Common.Utilities.Collections;
using Nuke.GitHub;
using static Nuke.Common.IO.FileSystemTasks;
using static Nuke.Common.IO.PathConstruction;
using static Nuke.Common.Tools.DotNet.DotNetTasks;
using static Nuke.GitHub.ChangeLogExtensions;
using static Nuke.GitHub.GitHubTasks;
using static Nuke.Common.ChangeLog.ChangelogTasks;
using static Nuke.Common.IO.TextTasks;
using System.IO;
using JetBrains.Annotations;
using Nuke.Common.Tools.Coverlet;

class Build : NukeBuild
{
    public static int Main() => Execute<Build>(x => x.Compile);

    [Parameter("Configuration to build - Default is 'Debug' (local) or 'Release' (server)")]
    readonly Configuration Configuration = IsLocalBuild ? Configuration.Debug : Configuration.Release;

    [GitVersion(Framework = "net8.0", NoFetch = true)] GitVersion GitVersion;
    [GitRepository] readonly GitRepository GitRepository;

    [Solution] readonly Solution Solution;
    AbsolutePath OutputDirectory => RootDirectory / "output";
    AbsolutePath ChangeLogFile => RootDirectory / "CHANGELOG.md";

    [Parameter] readonly string GitHubAuthenticationToken;
    [Parameter] readonly string NuGetApiKey;

    Target Clean => _ => _
        .Executes(() =>
        {
            (RootDirectory / "src").GlobDirectories("**/bin", "**/obj").ForEach(d => d.DeleteDirectory());
            (RootDirectory / "test").GlobDirectories("**/bin", "**/obj").ForEach(d => d.DeleteDirectory());
            OutputDirectory.CreateOrCleanDirectory();
        });

    Target Restore => _ => _
        .DependsOn(Clean)
        .Executes(() =>
        {
            DotNetRestore(s => s
                .SetProjectFile(Solution));
        });

    Target Compile => _ => _
        .DependsOn(Restore)
        .Executes(() =>
        {
            WriteFileVersionProvider();

            DotNetBuild(s => s
               .SetProjectFile(Solution)
               .SetConfiguration(Configuration)
               .SetAssemblyVersion(GitVersion.AssemblySemVer)
               .SetFileVersion(GitVersion.AssemblySemVer)
               .SetInformationalVersion(GitVersion.InformationalVersion)
               .EnableNoRestore());
        });

    void WriteFileVersionProvider()
    {
        var fileVersionPath = RootDirectory / "src" / "Dangl.BCF" / "FileVersionProvider.cs";
        var date = System.DateTime.UtcNow;
        var dateCode = $"new DateTime({date.Year}, {date.Month}, {date.Day}, {date.Hour}, {date.Minute}, {date.Second}, DateTimeKind.Utc)";
        var fileVersionCode = $@"using System;
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
namespace Dangl.BCF
{{
    // This file is automatically generated from the build script
    [System.CodeDom.Compiler.GeneratedCode(""GitVersionBuild"", """")]
    public static class FileVersionProvider
    {{
        public static string AssemblyVersion => ""{GitVersion.Major}.{GitVersion.Minor}.{GitVersion.Patch}.0"";
        public static string FileVersion => ""{GitVersion.MajorMinorPatch}"";
        public static string NuGetVersion => ""{GitVersion.NuGetVersion}"";
        public static DateTime BuildDateUtc => {dateCode};
    }}
}}
";

        fileVersionPath.WriteAllText(fileVersionCode);
    }

    Target Pack => _ => _
        .DependsOn(Compile)
        .Executes(() =>
        {
            var changeLog = GetCompleteChangeLog(ChangeLogFile)
                .EscapeStringPropertyForMsBuild();

            DotNetPack(s => s
                .SetPackageReleaseNotes(changeLog)
                .SetConfiguration(Configuration)
                .SetVersion(GitVersion.NuGetVersion)
                .SetOutputDirectory(OutputDirectory)
                .SetDescription("Dangl.BCF")
                .SetTitle("Dangl.BCF")
                .EnableNoBuild());
        });

    Target Tests => _ => _
        .DependsOn(Compile)
        .Executes(() =>
        {
            var testProjects = new[]
            {
                RootDirectory / "test" / "Dangl.BCF.Tests"
            };

            DotNetTest(c => c
                .SetCoverletOutputFormat(CoverletOutputFormat.cobertura)
                .EnableNoBuild()
                .SetTestAdapterPath(".")
                .CombineWith(cc => testProjects
                    .Select(testProject =>
                    {
                        var projectDirectory = Path.GetDirectoryName(testProject);
                        var projectName = Path.GetFileNameWithoutExtension(testProject);
                        return cc
                         .SetProjectFile(testProject)
                         .SetLoggers($"xunit;LogFilePath={OutputDirectory / projectName}_testresults.xml");
                    })),
                        degreeOfParallelism: Environment.ProcessorCount,
                        completeOnFailure: true);
        });

    Target Push => _ => _
        .DependsOn(Pack)
        .Requires(() => NuGetApiKey)
        .Executes(() =>
        {
            var nuGetPackages = OutputDirectory
            .GlobFiles("*.nupkg")
                .Select(p => p.ToString())
                .Where(x => !x.EndsWith("symbols.nupkg"))
                .ToList();
            Assert.NotEmpty(nuGetPackages);

            nuGetPackages.ForEach(x =>
                {
                    throw new Exception("Not implemeneted yet.");
                    /*
                    DotNetNuGetPush(s => s
                        .SetTargetPath(x)
                        .SetSkipDuplicate(true)
                        .SetSource(IabiGitHubPackageSource)
                        .SetApiKey(IabiGitHubPackageApiKey));

                    if (GitVersion.BranchName.Equals("master") || GitVersion.BranchName.Equals("origin/master"))
                    {
                        DotNetNuGetPush(s => s
                           .SetTargetPath(x)
                           .SetSource("https://api.nuget.org/v3/index.json")
                           .SetSkipDuplicate(true)
                           .SetApiKey(NuGetApiKey));
                    }
                    */
                });
        });

    Target PublishGitHubRelease => _ => _
        .DependsOn(Push)
        .Requires(() => GitHubAuthenticationToken)
        .OnlyWhenDynamic(() => GitVersion.BranchName.Equals("master") || GitVersion.BranchName.Equals("origin/master"))
        .Executes(async () =>
        {
            var releaseTag = $"v{GitVersion.MajorMinorPatch}";

            var changeLogSectionEntries = ExtractChangelogSectionNotes(ChangeLogFile);
            var latestChangeLog = changeLogSectionEntries
                .Aggregate((c, n) => c + Environment.NewLine + n);
            var completeChangeLog = $"## {releaseTag}" + Environment.NewLine + latestChangeLog;

            var repositoryInfo = GetGitHubRepositoryInfo(GitRepository);
            var nuGetPackages = OutputDirectory.GlobFiles("*.nupkg").Select(p => p.ToString()).ToArray();
            Assert.NotEmpty(nuGetPackages);

            await PublishRelease(x => x
                .SetArtifactPaths(nuGetPackages)
                .SetCommitSha(GitVersion.Sha)
                .SetReleaseNotes(completeChangeLog)
                .SetRepositoryName(repositoryInfo.repositoryName)
                .SetRepositoryOwner(repositoryInfo.gitHubOwner)
                .SetTag(releaseTag)
                .SetToken(GitHubAuthenticationToken));
        });
}
