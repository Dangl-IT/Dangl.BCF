// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.0.0.433
//    <NameSpace>iabi.BCF.BCFv2.Schemas</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><DataMemberNameArg>OnlyIfDifferent</DataMemberNameArg><DataMemberOnXmlIgnore>False</DataMemberOnXmlIgnore><CodeBaseTag>Net45</CodeBaseTag><InitializeFields>All</InitializeFields><GenerateUnusedComplexTypes>False</GenerateUnusedComplexTypes><GenerateUnusedSimpleTypes>False</GenerateUnusedSimpleTypes><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableLazyLoading>True</EnableLazyLoading><VirtualProp>False</VirtualProp><PascalCase>False</PascalCase><AutomaticProperties>False</AutomaticProperties><PropNameSpecified>Default</PropNameSpecified><PrivateFieldName>StartWithUnderscore</PrivateFieldName><PrivateFieldNamePrefix></PrivateFieldNamePrefix><EnableRestriction>True</EnableRestriction><RestrictionMaxLenght>True</RestrictionMaxLenght><RestrictionRegEx>True</RestrictionRegEx><RestrictionRange>True</RestrictionRange><ValidateProperty>False</ValidateProperty><ClassNamePrefix></ClassNamePrefix><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><EnableAppInfoSettings>False</EnableAppInfoSettings><EnableExternalSchemasCache>False</EnableExternalSchemasCache><EnableDebug>True</EnableDebug><EnableWarn>False</EnableWarn><ExcludeImportedTypes>False</ExcludeImportedTypes><ExpandNesteadAttributeGroup>False</ExpandNesteadAttributeGroup><CleanupCode>True</CleanupCode><EnableXmlSerialization>True</EnableXmlSerialization><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><EnableEncoding>False</EnableEncoding><EnableXMLIndent>True</EnableXMLIndent><Encoder>UTF8</Encoder><Serializer>XmlSerializer</Serializer><sspNullable>True</sspNullable><sspString>True</sspString><sspCollection>True</sspCollection><sspComplexType>True</sspComplexType><sspSimpleType>True</sspSimpleType><BaseClassName>EntityBase</BaseClassName><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><CustomUsings></CustomUsings><AttributesToExlude></AttributesToExlude>
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace iabi.BCF.BCFv2.Schemas
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.ComponentModel.DataAnnotations;
    using System.Xml;
    using System.Collections.Generic;


    /// <summary>
    /// visualiztioninfo documentation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true)]
    [XmlRootAttribute(Namespace = "", IsNullable = false)]
    public partial class VisualizationInfo
    {

        private List<Component> _components;

        private OrthogonalCamera _orthogonalCamera;

        private PerspectiveCamera _perspectiveCamera;

        private List<Line> _lines;

        private List<ClippingPlane> _clippingPlanes;

        private List<VisualizationInfoBitmaps> _bitmaps;

        private static XmlSerializer serializer;

        [XmlArrayItemAttribute(IsNullable = false)]
        public List<Component> Components
        {
            get
            {
                if ((_components == null))
                {
                    _components = new List<Component>();
                }
                return _components;
            }
            set
            {
                _components = value;
            }
        }

        public OrthogonalCamera OrthogonalCamera
        {
            get
            {
                if ((_orthogonalCamera == null))
                {
                    _orthogonalCamera = new OrthogonalCamera();
                }
                return _orthogonalCamera;
            }
            set
            {
                _orthogonalCamera = value;
            }
        }

        public PerspectiveCamera PerspectiveCamera
        {
            get
            {
                if ((_perspectiveCamera == null))
                {
                    _perspectiveCamera = new PerspectiveCamera();
                }
                return _perspectiveCamera;
            }
            set
            {
                _perspectiveCamera = value;
            }
        }

        [XmlArrayItemAttribute(IsNullable = false)]
        public List<Line> Lines
        {
            get
            {
                if ((_lines == null))
                {
                    _lines = new List<Line>();
                }
                return _lines;
            }
            set
            {
                _lines = value;
            }
        }

        [XmlArrayItemAttribute(IsNullable = false)]
        public List<ClippingPlane> ClippingPlanes
        {
            get
            {
                if ((_clippingPlanes == null))
                {
                    _clippingPlanes = new List<ClippingPlane>();
                }
                return _clippingPlanes;
            }
            set
            {
                _clippingPlanes = value;
            }
        }

        [XmlElementAttribute("Bitmaps")]
        public List<VisualizationInfoBitmaps> Bitmaps
        {
            get
            {
                if ((_bitmaps == null))
                {
                    _bitmaps = new List<VisualizationInfoBitmaps>();
                }
                return _bitmaps;
            }
            set
            {
                _bitmaps = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(VisualizationInfo));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Components should be serialized
        /// </summary>
        public virtual bool ShouldSerializeComponents()
        {
            return Components != null && Components.Count > 0;
        }

        /// <summary>
        /// Test whether Lines should be serialized
        /// </summary>
        public virtual bool ShouldSerializeLines()
        {
            return Lines != null && Lines.Count > 0;
        }

        /// <summary>
        /// Test whether ClippingPlanes should be serialized
        /// </summary>
        public virtual bool ShouldSerializeClippingPlanes()
        {
            return ClippingPlanes != null && ClippingPlanes.Count > 0;
        }

        /// <summary>
        /// Test whether Bitmaps should be serialized
        /// </summary>
        public virtual bool ShouldSerializeBitmaps()
        {
            return Bitmaps != null && Bitmaps.Count > 0;
        }

        /// <summary>
        /// Test whether OrthogonalCamera should be serialized
        /// </summary>
        public virtual bool ShouldSerializeOrthogonalCamera()
        {
            return (_orthogonalCamera != null);
        }

        /// <summary>
        /// Test whether PerspectiveCamera should be serialized
        /// </summary>
        public virtual bool ShouldSerializePerspectiveCamera()
        {
            return (_perspectiveCamera != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current VisualizationInfo object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an VisualizationInfo object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output VisualizationInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out VisualizationInfo obj, out Exception exception)
        {
            exception = null;
            obj = default(VisualizationInfo);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out VisualizationInfo obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static VisualizationInfo Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((VisualizationInfo)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static VisualizationInfo Deserialize(Stream s)
        {
            return ((VisualizationInfo)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current VisualizationInfo object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an VisualizationInfo object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output VisualizationInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out VisualizationInfo obj, out Exception exception)
        {
            exception = null;
            obj = default(VisualizationInfo);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out VisualizationInfo obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static VisualizationInfo LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    public partial class Component
    {

        private bool _shouldSerializeVisible;

        private bool _shouldSerializeSelected;

        private string _originatingSystem;

        private string _authoringToolId;

        private string _ifcGuid;

        private bool? _selected;

        private bool _visible;

        private byte[] _color;

        private static XmlSerializer serializer;

        /// <summary>
        /// Component class constructor
        /// </summary>
        public Component()
        {
            _visible = true;
        }

        public string OriginatingSystem
        {
            get
            {
                return _originatingSystem;
            }
            set
            {
                _originatingSystem = value;
            }
        }

        public string AuthoringToolId
        {
            get
            {
                return _authoringToolId;
            }
            set
            {
                _authoringToolId = value;
            }
        }

        [XmlAttributeAttribute(DataType = "normalizedString")]
        public string IfcGuid
        {
            get
            {
                return _ifcGuid;
            }
            set
            {
                _ifcGuid = value;
            }
        }

        [XmlAttribute]
        public bool Selected
        {
            get
            {
                if (_selected.HasValue)
                {
                    return _selected.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                _selected = value;
                _shouldSerializeSelected = true;
            }
        }

        [XmlIgnore]
        public bool SelectedSpecified
        {
            get
            {
                return _selected.HasValue;
            }
            set
            {
                if (value == false)
                {
                    _selected = null;
                }
            }
        }

        [XmlAttribute]
        [DefaultValueAttribute(true)]
        public bool Visible
        {
            get
            {
                return _visible;
            }
            set
            {
                _visible = value;
                _shouldSerializeVisible = true;
            }
        }

        [XmlAttributeAttribute(DataType = "hexBinary")]
        public byte[] Color
        {
            get
            {
                return _color;
            }
            set
            {
                _color = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(Component));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Selected should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSelected()
        {
            if (_shouldSerializeSelected)
            {
                return true;
            }
            return (_selected != default(bool));
        }

        /// <summary>
        /// Test whether Visible should be serialized
        /// </summary>
        public virtual bool ShouldSerializeVisible()
        {
            if (_shouldSerializeVisible)
            {
                return true;
            }
            return (_visible != default(bool));
        }

        /// <summary>
        /// Test whether OriginatingSystem should be serialized
        /// </summary>
        public virtual bool ShouldSerializeOriginatingSystem()
        {
            return !string.IsNullOrEmpty(OriginatingSystem);
        }

        /// <summary>
        /// Test whether AuthoringToolId should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAuthoringToolId()
        {
            return !string.IsNullOrEmpty(AuthoringToolId);
        }

        /// <summary>
        /// Test whether IfcGuid should be serialized
        /// </summary>
        public virtual bool ShouldSerializeIfcGuid()
        {
            return !string.IsNullOrEmpty(IfcGuid);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Component object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Component object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Component object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Component obj, out Exception exception)
        {
            exception = null;
            obj = default(Component);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Component obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static Component Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Component)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Component Deserialize(Stream s)
        {
            return ((Component)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Component object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Component object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Component object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Component obj, out Exception exception)
        {
            exception = null;
            obj = default(Component);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Component obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Component LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    public partial class ClippingPlane
    {

        private Point _location;

        private Direction _direction;

        private static XmlSerializer serializer;

        public Point Location
        {
            get
            {
                if ((_location == null))
                {
                    _location = new Point();
                }
                return _location;
            }
            set
            {
                _location = value;
            }
        }

        public Direction Direction
        {
            get
            {
                if ((_direction == null))
                {
                    _direction = new Direction();
                }
                return _direction;
            }
            set
            {
                _direction = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ClippingPlane));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Location should be serialized
        /// </summary>
        public virtual bool ShouldSerializeLocation()
        {
            return (_location != null);
        }

        /// <summary>
        /// Test whether Direction should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDirection()
        {
            return (_direction != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ClippingPlane object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ClippingPlane object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ClippingPlane object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ClippingPlane obj, out Exception exception)
        {
            exception = null;
            obj = default(ClippingPlane);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ClippingPlane obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ClippingPlane Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((ClippingPlane)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ClippingPlane Deserialize(Stream s)
        {
            return ((ClippingPlane)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ClippingPlane object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ClippingPlane object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ClippingPlane object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ClippingPlane obj, out Exception exception)
        {
            exception = null;
            obj = default(ClippingPlane);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ClippingPlane obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ClippingPlane LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    public partial class Point
    {

        private bool _shouldSerializeZ;

        private bool _shouldSerializeY;

        private bool _shouldSerializeX;

        private double _x;

        private double _y;

        private double _z;

        private static XmlSerializer serializer;

        public double X
        {
            get
            {
                return _x;
            }
            set
            {
                _x = value;
                _shouldSerializeX = true;
            }
        }

        public double Y
        {
            get
            {
                return _y;
            }
            set
            {
                _y = value;
                _shouldSerializeY = true;
            }
        }

        public double Z
        {
            get
            {
                return _z;
            }
            set
            {
                _z = value;
                _shouldSerializeZ = true;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(Point));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether X should be serialized
        /// </summary>
        public virtual bool ShouldSerializeX()
        {
            if (_shouldSerializeX)
            {
                return true;
            }
            return (_x != default(double));
        }

        /// <summary>
        /// Test whether Y should be serialized
        /// </summary>
        public virtual bool ShouldSerializeY()
        {
            if (_shouldSerializeY)
            {
                return true;
            }
            return (_y != default(double));
        }

        /// <summary>
        /// Test whether Z should be serialized
        /// </summary>
        public virtual bool ShouldSerializeZ()
        {
            if (_shouldSerializeZ)
            {
                return true;
            }
            return (_z != default(double));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Point object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Point object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Point object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Point obj, out Exception exception)
        {
            exception = null;
            obj = default(Point);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Point obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static Point Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Point)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Point Deserialize(Stream s)
        {
            return ((Point)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Point object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Point object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Point object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Point obj, out Exception exception)
        {
            exception = null;
            obj = default(Point);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Point obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Point LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    public partial class Direction
    {

        private bool _shouldSerializeZ;

        private bool _shouldSerializeY;

        private bool _shouldSerializeX;

        private double _x;

        private double _y;

        private double _z;

        private static XmlSerializer serializer;

        public double X
        {
            get
            {
                return _x;
            }
            set
            {
                _x = value;
                _shouldSerializeX = true;
            }
        }

        public double Y
        {
            get
            {
                return _y;
            }
            set
            {
                _y = value;
                _shouldSerializeY = true;
            }
        }

        public double Z
        {
            get
            {
                return _z;
            }
            set
            {
                _z = value;
                _shouldSerializeZ = true;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(Direction));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether X should be serialized
        /// </summary>
        public virtual bool ShouldSerializeX()
        {
            if (_shouldSerializeX)
            {
                return true;
            }
            return (_x != default(double));
        }

        /// <summary>
        /// Test whether Y should be serialized
        /// </summary>
        public virtual bool ShouldSerializeY()
        {
            if (_shouldSerializeY)
            {
                return true;
            }
            return (_y != default(double));
        }

        /// <summary>
        /// Test whether Z should be serialized
        /// </summary>
        public virtual bool ShouldSerializeZ()
        {
            if (_shouldSerializeZ)
            {
                return true;
            }
            return (_z != default(double));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Direction object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Direction object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Direction object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Direction obj, out Exception exception)
        {
            exception = null;
            obj = default(Direction);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Direction obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static Direction Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Direction)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Direction Deserialize(Stream s)
        {
            return ((Direction)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Direction object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Direction object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Direction object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Direction obj, out Exception exception)
        {
            exception = null;
            obj = default(Direction);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Direction obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Direction LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    public partial class Line
    {

        private Point _startPoint;

        private Point _endPoint;

        private static XmlSerializer serializer;

        public Point StartPoint
        {
            get
            {
                if ((_startPoint == null))
                {
                    _startPoint = new Point();
                }
                return _startPoint;
            }
            set
            {
                _startPoint = value;
            }
        }

        public Point EndPoint
        {
            get
            {
                if ((_endPoint == null))
                {
                    _endPoint = new Point();
                }
                return _endPoint;
            }
            set
            {
                _endPoint = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(Line));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether StartPoint should be serialized
        /// </summary>
        public virtual bool ShouldSerializeStartPoint()
        {
            return (_startPoint != null);
        }

        /// <summary>
        /// Test whether EndPoint should be serialized
        /// </summary>
        public virtual bool ShouldSerializeEndPoint()
        {
            return (_endPoint != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Line object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Line object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Line object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Line obj, out Exception exception)
        {
            exception = null;
            obj = default(Line);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Line obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static Line Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Line)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Line Deserialize(Stream s)
        {
            return ((Line)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Line object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Line object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Line object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Line obj, out Exception exception)
        {
            exception = null;
            obj = default(Line);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Line obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Line LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    public partial class PerspectiveCamera
    {

        private bool _shouldSerializeFieldOfView;

        private Point _cameraViewPoint;

        private Direction _cameraDirection;

        private Direction _cameraUpVector;

        private double _fieldOfView;

        private static XmlSerializer serializer;

        public Point CameraViewPoint
        {
            get
            {
                if ((_cameraViewPoint == null))
                {
                    _cameraViewPoint = new Point();
                }
                return _cameraViewPoint;
            }
            set
            {
                _cameraViewPoint = value;
            }
        }

        public Direction CameraDirection
        {
            get
            {
                if ((_cameraDirection == null))
                {
                    _cameraDirection = new Direction();
                }
                return _cameraDirection;
            }
            set
            {
                _cameraDirection = value;
            }
        }

        public Direction CameraUpVector
        {
            get
            {
                if ((_cameraUpVector == null))
                {
                    _cameraUpVector = new Direction();
                }
                return _cameraUpVector;
            }
            set
            {
                _cameraUpVector = value;
            }
        }

        [RangeAttribute(45D, 60D)]
        public double FieldOfView
        {
            get
            {
                return _fieldOfView;
            }
            set
            {
                _fieldOfView = value;
                _shouldSerializeFieldOfView = true;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(PerspectiveCamera));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether FieldOfView should be serialized
        /// </summary>
        public virtual bool ShouldSerializeFieldOfView()
        {
            if (_shouldSerializeFieldOfView)
            {
                return true;
            }
            return (_fieldOfView != default(double));
        }

        /// <summary>
        /// Test whether CameraViewPoint should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCameraViewPoint()
        {
            return (_cameraViewPoint != null);
        }

        /// <summary>
        /// Test whether CameraDirection should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCameraDirection()
        {
            return (_cameraDirection != null);
        }

        /// <summary>
        /// Test whether CameraUpVector should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCameraUpVector()
        {
            return (_cameraUpVector != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PerspectiveCamera object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an PerspectiveCamera object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output PerspectiveCamera object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out PerspectiveCamera obj, out Exception exception)
        {
            exception = null;
            obj = default(PerspectiveCamera);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out PerspectiveCamera obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static PerspectiveCamera Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((PerspectiveCamera)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static PerspectiveCamera Deserialize(Stream s)
        {
            return ((PerspectiveCamera)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current PerspectiveCamera object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an PerspectiveCamera object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PerspectiveCamera object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PerspectiveCamera obj, out Exception exception)
        {
            exception = null;
            obj = default(PerspectiveCamera);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out PerspectiveCamera obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static PerspectiveCamera LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    public partial class OrthogonalCamera
    {

        private bool _shouldSerializeViewToWorldScale;

        private Point _cameraViewPoint;

        private Direction _cameraDirection;

        private Direction _cameraUpVector;

        private double _viewToWorldScale;

        private static XmlSerializer serializer;

        public Point CameraViewPoint
        {
            get
            {
                if ((_cameraViewPoint == null))
                {
                    _cameraViewPoint = new Point();
                }
                return _cameraViewPoint;
            }
            set
            {
                _cameraViewPoint = value;
            }
        }

        public Direction CameraDirection
        {
            get
            {
                if ((_cameraDirection == null))
                {
                    _cameraDirection = new Direction();
                }
                return _cameraDirection;
            }
            set
            {
                _cameraDirection = value;
            }
        }

        public Direction CameraUpVector
        {
            get
            {
                if ((_cameraUpVector == null))
                {
                    _cameraUpVector = new Direction();
                }
                return _cameraUpVector;
            }
            set
            {
                _cameraUpVector = value;
            }
        }

        /// <summary>
        /// view's visible size in meters
        /// </summary>
        public double ViewToWorldScale
        {
            get
            {
                return _viewToWorldScale;
            }
            set
            {
                _viewToWorldScale = value;
                _shouldSerializeViewToWorldScale = true;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(OrthogonalCamera));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ViewToWorldScale should be serialized
        /// </summary>
        public virtual bool ShouldSerializeViewToWorldScale()
        {
            if (_shouldSerializeViewToWorldScale)
            {
                return true;
            }
            return (_viewToWorldScale != default(double));
        }

        /// <summary>
        /// Test whether CameraViewPoint should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCameraViewPoint()
        {
            return (_cameraViewPoint != null);
        }

        /// <summary>
        /// Test whether CameraDirection should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCameraDirection()
        {
            return (_cameraDirection != null);
        }

        /// <summary>
        /// Test whether CameraUpVector should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCameraUpVector()
        {
            return (_cameraUpVector != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current OrthogonalCamera object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an OrthogonalCamera object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output OrthogonalCamera object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out OrthogonalCamera obj, out Exception exception)
        {
            exception = null;
            obj = default(OrthogonalCamera);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out OrthogonalCamera obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static OrthogonalCamera Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((OrthogonalCamera)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static OrthogonalCamera Deserialize(Stream s)
        {
            return ((OrthogonalCamera)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current OrthogonalCamera object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an OrthogonalCamera object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output OrthogonalCamera object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out OrthogonalCamera obj, out Exception exception)
        {
            exception = null;
            obj = default(OrthogonalCamera);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out OrthogonalCamera obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static OrthogonalCamera LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    [DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true)]
    public partial class VisualizationInfoBitmaps
    {

        private bool _shouldSerializeHeight;

        private bool _shouldSerializeBitmap;

        private BitmapFormat _bitmap;

        private string _reference;

        private Point _location;

        private Direction _normal;

        private Direction _up;

        private double _height;

        private static XmlSerializer serializer;

        public BitmapFormat Bitmap
        {
            get
            {
                return _bitmap;
            }
            set
            {
                _bitmap = value;
                _shouldSerializeBitmap = true;
            }
        }

        public string Reference
        {
            get
            {
                return _reference;
            }
            set
            {
                _reference = value;
            }
        }

        public Point Location
        {
            get
            {
                if ((_location == null))
                {
                    _location = new Point();
                }
                return _location;
            }
            set
            {
                _location = value;
            }
        }

        public Direction Normal
        {
            get
            {
                if ((_normal == null))
                {
                    _normal = new Direction();
                }
                return _normal;
            }
            set
            {
                _normal = value;
            }
        }

        public Direction Up
        {
            get
            {
                if ((_up == null))
                {
                    _up = new Direction();
                }
                return _up;
            }
            set
            {
                _up = value;
            }
        }

        public double Height
        {
            get
            {
                return _height;
            }
            set
            {
                _height = value;
                _shouldSerializeHeight = true;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(VisualizationInfoBitmaps));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Bitmap should be serialized
        /// </summary>
        public virtual bool ShouldSerializeBitmap()
        {
            if (_shouldSerializeBitmap)
            {
                return true;
            }
            return (_bitmap != default(BitmapFormat));
        }

        /// <summary>
        /// Test whether Height should be serialized
        /// </summary>
        public virtual bool ShouldSerializeHeight()
        {
            if (_shouldSerializeHeight)
            {
                return true;
            }
            return (_height != default(double));
        }

        /// <summary>
        /// Test whether Location should be serialized
        /// </summary>
        public virtual bool ShouldSerializeLocation()
        {
            return (_location != null);
        }

        /// <summary>
        /// Test whether Normal should be serialized
        /// </summary>
        public virtual bool ShouldSerializeNormal()
        {
            return (_normal != null);
        }

        /// <summary>
        /// Test whether Up should be serialized
        /// </summary>
        public virtual bool ShouldSerializeUp()
        {
            return (_up != null);
        }

        /// <summary>
        /// Test whether Reference should be serialized
        /// </summary>
        public virtual bool ShouldSerializeReference()
        {
            return !string.IsNullOrEmpty(Reference);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current VisualizationInfoBitmaps object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an VisualizationInfoBitmaps object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output VisualizationInfoBitmaps object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out VisualizationInfoBitmaps obj, out Exception exception)
        {
            exception = null;
            obj = default(VisualizationInfoBitmaps);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out VisualizationInfoBitmaps obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static VisualizationInfoBitmaps Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((VisualizationInfoBitmaps)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static VisualizationInfoBitmaps Deserialize(Stream s)
        {
            return ((VisualizationInfoBitmaps)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current VisualizationInfoBitmaps object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an VisualizationInfoBitmaps object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output VisualizationInfoBitmaps object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out VisualizationInfoBitmaps obj, out Exception exception)
        {
            exception = null;
            obj = default(VisualizationInfoBitmaps);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out VisualizationInfoBitmaps obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static VisualizationInfoBitmaps LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [Serializable]
    public enum BitmapFormat
    {

        PNG,

        JPG,
    }
}
#pragma warning restore
